{
  "posts": [
    {
      "id": "616198d8ce9a7f4c78ab79bc",
      "uuid": "8fe624bc-6fbf-4341-adc3-61ec2070d721",
      "title": "Let's build Vue directives: Adding a wave effect to buttons",
      "slug": "lets-build-vue-directives-adding-a-wave-effect-to-buttons",
      "html": "<blockquote>TL: DR - take me to the code<br><br>1. <a href=\"https://codesandbox.io/s/v-ripple-vue-2-wonkg\">Vue 2 Code Sandbox</a><br>2. <a href=\"https://codesandbox.io/s/v-ripple-vue-3-joji0\">Vue 3 Code Sandbox</a><br>3. <a href=\"https://v3.vuejs.org/guide/migration/custom-directives.html#overview.\">Difference between Vue 2 and Vue 3 implementation</a> </blockquote><p>Material design was built around the idea of creating clean user interfaces with rich user feedback. One part of its toolkit is the '<a href=\"https://material.io/develop/ios/supporting/ripple\">Ripple Component</a>'. Whenever an element that uses 'Ripple' is clicked, it emits waves outwards from the mouse pointer. This signals a user that the click, or touch respectively, was recognized. </p><p>Using it in your Vue.js web application provides you this simple, yet elegant way of responding to user interactions.</p><h2 id=\"reasons-for-a-vue-directive\">Reasons for a Vue directive</h2><p>There are several excellent guides on the internet on how to achieve the same functionality with vanilla Javascript. There are also pure CSS implementations. Bear with me though, a custom Vue directive is still a valid choice, because it: </p><ul><li>is easier to reuse - all styling and animation happens inside the directive's code</li><li>requires no selectors but uses Vue's built-in low-level DOM access</li><li>can be directly attached to any element with <code>v-ripple</code></li></ul><blockquote>Please note that this is not an exact replica of the Mateiral Design implementation style. You can, however, tweak the directive's functionality according to your needs</blockquote><h2 id=\"setup-a-vue-3-project-with-vite\">Setup a Vue 3 Project with Vite</h2><p>We'll use <a href=\"https://vitejs.dev/guide/\">Vite</a> to spin up a basic application. You can alternatively use <a href=\"https://cli.vuejs.org/guide/\">Vue CLI</a>. </p><p>Change into a directory of your choice and type: </p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># 1: Init your project\nnpm init vite@latest # using Vite with npm\n# yarn create vite   # using Vite with yarn\n# vue create .       # using Vue CLI\n\n# 2: Change into the created folder and start the dev server\ncd vite-project\nnpm install\nnpm run dev\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"make-the-app-object-available-for-directive-registration\">Make the app object available for directive registration</h2><p>Before registering our custom directives, let's make a small adjustment in Vue's main file. It uses <code>createApp</code> on the fly, but we need the created app object to register components on. </p><blockquote>This step is optional, you could also chain <code>.directive()</code> as part of the createApp bootstrapping process.</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-js\">// Inside main.js: Change this \nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n\n// ------\n\n// to \nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\n// ... register directives here\n\napp.mount('#app')\n</code></pre>\n<!--kg-card-end: markdown--><p>With <code>app.directive(directiveName, directiveFunction)</code>, we're now able to register our own directives everywhere in the app.</p><h2 id=\"create-the-ripple-directive\">Create the ripple directive</h2><p>The functionality we are about to achieve breaks down into three significant components: </p><ul><li>A parent function is responsible to create a DOM helper element and handling the following two commands</li><li>One nested function applies styles to the helper element</li><li>A second nested function creates the ripple animation layout</li></ul><p>We can then use the standard Vue 3 <code>mounted</code> lifecycle to apply the directive. Let's start by creating a <code>/directives</code> folder in the <code>/src</code> of our project and name it <code>vRipple.js</code>. </p><h3 id=\"the-parent-function\">The parent function</h3><p>In this file, add the following code</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const handleRipple = (element, binding, ev) =&gt; {\n  const rippleElement = document.createElement(&quot;span&quot;);\n  let currentDiameter = 1;\n  let currentOpacity = 0.65;\n  let animationHandler = setInterval(animateRippleSpread, 15);\n  applyRippleStyle();\n\n  /* function applyRippleStyle() {...} */\n\n  /* function animateRippleSpread() {...} */\n};\n\n// Hook the directive to the DOM element\nconst vRipple = {\n  mounted: (el, binding) =&gt; {\n    el.style.position = &quot;relative&quot;;\n    el.style.overflow = &quot;hidden&quot;;\n    el.addEventListener(&quot;click&quot;, (ev) =&gt; handleRipple(el, binding, ev));\n  }\n};\n\nexport default vRipple;\n</code></pre>\n<!--kg-card-end: markdown--><p>We will use <code>currentDiameter</code> and <code>currentOpacity</code> for the wave effect. An interval handler will come in handy to halt the animation once its spread reaches the outer limits.</p><h3 id=\"apply-the-basic-ripple-effect-style\">Apply the basic ripple effect style</h3><p>The first child function needs to be called once the <code>span</code> helper element is created. It calculates where on the button the click took place and handles positioning and basic styles accordingly. You can change these to match your own taste or even extend them.</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">function applyRippleStyle() {\n  const elementCoordinates = element.getBoundingClientRect();\n  const offsetY = ev.clientY - elementCoordinates.y;\n  const offsetX = ev.clientX - elementCoordinates.x;\n\n  rippleElement.style.position = &quot;absolute&quot;;\n  rippleElement.style.height = &quot;5px&quot;;\n  rippleElement.style.width = &quot;5px&quot;;\n  rippleElement.style.borderRadius = &quot;100%&quot;;\n  rippleElement.style.backgroundColor = &quot;#f2f2f2&quot;;\n  rippleElement.style.left = `${offsetX}px`;\n  rippleElement.style.top = `${offsetY}px`;\n  ev.target.appendChild(rippleElement);\n}\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"create-the-ripple-animation\">Create the ripple animation</h3><p>Inside <code>animateRippleSpread</code>, we're letting the actual magic happen. This function is called every 15 milliseconds. It conditionally alters the size and opacity of the <code>span</code> helper <strong>or</strong> removes the element once its maximum diameter is reached.</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">function animateRippleSpread() {\n  const maximalDiameter = +binding.value || 50;\n  if (currentDiameter &lt;= maximalDiameter) {\n    currentDiameter++;\n    currentOpacity -= 0.65 / maximalDiameter;\n    rippleElement.style.transform = `scale(${currentDiameter})`;\n    rippleElement.style.opacity = `${currentOpacity}`;\n  } else {\n    rippleElement.remove();\n    clearInterval(animationHandler);\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>Note that when you bind a value to the directive, the animation's duration will increase with the maximum size of the ripple element. This will result in a longer and larger wave.</blockquote><p>We're almost done. The one thing left to do is to register the directive and try it out: </p><p>Inside the <code>main.js</code> file, register the directive as follows: </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">import { createApp } from 'vue'\nimport App from './App.vue'\nimport vRipple from './directives/vRipple'\n\nconst app = createApp(App)\n\napp.directive('ripple', vRipple)\n\napp.mount('#app')\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"use-the-directive-on-the-template\">Use the directive on the template</h2><p>All left to do is to apply <code>v-ripple</code> to an element of your choice. You can either try this out in your own environment or interactively using the Code Sandboxes for Vue2 or <a href=\"https://codesandbox.io/s/v-ripple-vue-3-joji0?file=/src/App.vue\">Vue3</a>.</p><p>And there we have it. A fully functional ripple directive that provides rich user feedback upon clicking an element. </p>",
      "comment_id": "616198d8ce9a7f4c78ab79bc",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-10-09T15:27:52.000+02:00",
      "updated_at": "2021-12-10T16:19:54.000+01:00",
      "published_at": "2021-12-10T10:00:00.000+01:00",
      "custom_excerpt": "The wave, aka the ripple effect, became popular with Google's material design guidelines. When a user interacts with a button, a wave-like animation would spread outwards from the clicking/touching point. Read on to learn how to implement this feature with a Vue.js directive.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/lets-build-vue-directives-adding-a-wave-effect-to-buttons/",
      "excerpt": "The wave, aka the ripple effect, became popular with Google's material design guidelines. When a user interacts with a button, a wave-like animation would spread outwards from the clicking/touching point. Read on to learn how to implement this feature with a Vue.js directive.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60fd811b2dcbe203bf99245f",
      "uuid": "ad93850b-9d4f-41e2-97b1-7827525f1859",
      "title": "A step-by-step guide to developing and deploying Vue apps with docker, part two",
      "slug": "a-step-by-step-guide-for-developing-and-deploying-a-vue-js-app-with-docker-part-two",
      "html": "<blockquote>Haven't read the previous article yet? <br>- Check out the <a href=\"https://blog.q-bit.me/how-to-develop-and-deploy-a-vue-js-app-with-docker-part-one/\">first part of the Vue-Docker series here</a>.<br>- Or if you're <a href=\"https://github.com/tq-bit/vue-docker-development\">TL: DR - take me to the code</a>.</blockquote><h2 id=\"build-the-devcontainer\">Build the dev - container</h2><p>Now that we have Docker installed and scaffolded our project, we can start developing. Let's begin by adding the following to the <code>Dev.Dockerfile</code>: </p><!--kg-card-begin: markdown--><pre><code class=\"language-Dockerfile\">FROM node:14-alpine\n\nWORKDIR /vue_app\n\nEXPOSE 8080\n\nCMD [ &quot;npm&quot;, &quot;run&quot;, &quot;serve&quot; ]\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>In case you wonder about the absence the  <code>npm install</code> command: We'll use the <code>vue_helper</code> container image <a href=\"https://blog.q-bit.me/how-to-develop-and-deploy-a-vue-js-app-with-docker-part-one/#setting-up-the-project\">from the first article</a> to manage npm packages.</blockquote><p>We can build the development container by running: </p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">docker build  \\\n    -f ./dockerfiles/Dev.Dockerfile \\\n    -t vue_app:dev \n    vue_app\n</code></pre>\n<!--kg-card-end: markdown--><p>You should then receive a container named <code>vue_app</code>. With it, we can start development.</p><p><strong>Note:</strong> Given you have read the previous article, you'll notice a slight difference in the build commands. Previously, we've used <a href=\"https://docs.docker.com/engine/reference/commandline/build/#build-with--\">the STDIN method</a> to read the content of the dockerfile. While it's generally a bit faster, it specifies no <strong>build context</strong> to the Docker daemon. If you try and replicate the STDIN way to build the development app's container, you will run into an error:</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">COPY failed: forbidden path outside the build context: ../vue_app/package.json\n</code></pre>\n<!--kg-card-end: markdown--><p>The difference, in a nutshell, is that: </p><ul><li>the STDIN method uses the context of the Dockerfile ( Path: ./dockerfiles/ )</li><li>while the <code>-f</code> - method uses the context of the currently active directory ( Path: ./ )</li></ul><h2 id=\"develop-with-docker\">Develop with Docker</h2><p>To develop, we must keep the container's content synchronized with our local source code. This can easily be achieved by using a bind mount. </p><p>Let's launch the development container by executing the following command: </p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">docker run \\\n    -v /path/to/project/vue_app:/vue_app \\\n    -p 8080:8080\n    -it vue_app:dev\n</code></pre>\n<!--kg-card-end: markdown--><p>It will:</p><ul><li>run a container based on the tagged image <code>vue_app:dev</code> and expose it on port 8080</li><li>sync the local working directory <code>/path/to/project/vue_app</code> with the container's working directory <code>vue_app</code> over a bind mount</li><li>Open an interactive session so you can keep track of your development server</li></ul><blockquote>If you are trying to get the container up with <a href=\"https://vitejs.dev/\">Vite</a> instead of the Vue CLI,  you must currently (30.10.2021) pass a <code>--host</code> flag in your <code>package.json</code> file:</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-js\">{ \n  &quot;scripts&quot;: { \n    // ... other scripts  \n    &quot;serve&quot;: &quot;vite --host 0.0.0.0&quot; \n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>When the container is running, the app can be accessed over a browser. Open a new tab at <code>http://localhost:8080</code> and you will see the familiar Vue boilerplate. And thanks to the bind mount, modifications to the code on your local machine will be replicated straight into the container. Vue CLI will pick these up and reload the browser page. </p><p>Finally, try and change the <code>msg</code> property of the <code>HelloWorld</code> component. If the change is visible inside your browser - congratulations - you've successfully set up your own Docker dev-environment 🌟.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/10/image-2.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"612\" height=\"410\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/10/image-2.png 600w, https://blog.q-bit.me/content/images/2021/10/image-2.png 612w\"></figure><p>You can now change the application to your heart's desire. </p><blockquote>In the <a href=\"https://github.com/tq-bit/vue-docker-development\">repository for this article</a>, I've created a simple to-do-list application that we can deploy later. </blockquote><h2 id=\"prepare-the-app-for-deployment\">Prepare the app for deployment</h2><p>We can already create &amp; manage an app, as well as develop its source code using Docker. What's left to do is to make it ready for a productive environment - without the dev-server overhead. </p><p>There are several ways to do so. You could use the example from the <a href=\"https://blog.q-bit.me/quick-dirty-how-to-deploy-a-fullstack-vue-js-app-with-a-working-node-js-backend/\">Quick &amp; Dirty article I wrote earlier</a>, that is, a custom Express.js server. But why reinvent the wheel if there's a container to the rescue?</p><blockquote>The example you find below is inspired by <a href=\"https://vuejs.org/v2/cookbook/dockerize-vuejs-app.html\">the official Vue 2 Docs</a>. It works equally well with any other kind of JS framework that use Webpack or Vite. </blockquote><p>Let's fill the remaining <code>Deploy.Dockerfile</code> with life by adding these commands:</p><!--kg-card-begin: markdown--><pre><code class=\"language-dockerfile\"># build stage\nFROM node:14-alpine AS build-stage\n\nWORKDIR /vue_app\n\nCOPY package.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\n# production stage\nFROM nginx AS production-stage\n\nCOPY --from=build-stage /vue_app/dist /usr/share/nginx/html\n\nEXPOSE 80\n\nCMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]\n</code></pre>\n<!--kg-card-end: markdown--><p>Docker can interpret these to declare two distinct stages. This procedure is commonly referred to as '<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/#name-your-build-stages\">Multi-Stage Building</a>'. </p><ul><li>The build-stage will build the app using the Node.js image</li><li>The production stage will use an <a href=\"https://nginx.org/en/\">Nginx</a> web server image. </li><li>It launches a container that serves the built Vue SPA on port 80</li></ul><p>Stages refer to one another by using the <code>--from</code> - flag. Like this, you can streamline your development workflow. You could, for instance, extend the above commands by adding one or several test phases.</p><blockquote>At this point, you can also configure Nginx as per your project's requirements. Check out the <a href=\"https://hub.docker.com/_/nginx/\">official docs on Dockerhub</a> for more information.</blockquote><p>Once you're ready to ship your app, run: </p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">docker build \\\n    -f ./dockerfiles/Deploy.Dockerfile \\\n    -t vue_app:production \\\n    vue_app\n</code></pre>\n<!--kg-card-end: markdown--><p>You will receive an image that includes an optimized version of your app. It can be launched anywhere Docker is installed:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">docker run -p 80:80 vue_app:production\n</code></pre>\n<!--kg-card-end: markdown--><p>The application will then be available under <code>http://localhost</code>.</p><p>Let's recap: </p><ul><li>We've filled the two Dockerfiles for development and deployment with commands</li><li>Both provide us a unique way to develop and distribute our app</li><li>Docker also allows us to streamline our deployment process</li><li>This procedure is called 'Multi-Stage Building'</li></ul><h2 id=\"example-github-repos\">Example Github Repos</h2><p>I've collected all the code from the first two articles together in a Github Repos. You are welcome to use it either as a boilerplate or Proof of Concept.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/tq-bit/vue-docker-development\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - tq-bit/vue-docker-development: A boilerplate repos with three essential Dockerfiles to streamline you Vue app development project.</div><div class=\"kg-bookmark-description\">A boilerplate repos with three essential Dockerfiles to streamline you Vue app development project. - GitHub - tq-bit/vue-docker-development: A boilerplate repos with three essential Dockerfiles to...</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.com/fluidicon.png\" alt=\"\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">tq-bit</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opengraph.githubassets.com/2303890d85435f72345b8b4a082724eef34d779b1f8996e09bfd22ebc8e846df/tq-bit/vue-docker-development\" alt=\"\"></div></a></figure><h2 id=\"next-steps\">Next steps</h2><p>While you could use the example as-is, there's still room for improvement. So in the next and final article of the series:</p><ul><li>We'll use Dockerhub to publish our app image</li><li>We'll create a Virtual Host on Digital Ocean and deploy our app to it</li><li>Instead of running each docker command separately, we'll explore the usage of <code>docker-compose</code> for development and deployment</li></ul>",
      "comment_id": "60fd811b2dcbe203bf99245f",
      "feature_image": null,
      "featured": true,
      "created_at": "2021-07-25T17:19:55.000+02:00",
      "updated_at": "2021-11-15T07:53:24.000+01:00",
      "published_at": "2021-11-15T07:50:00.000+01:00",
      "custom_excerpt": "Vue is a great framework to develop user interfaces. It has experienced a great deal of growth in popularity since its initial release in 2014 and still continues to improve. This second part of the series will explain how to develop \"in\" a container and ship your app with a custom Docker workflow",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/a-step-by-step-guide-for-developing-and-deploying-a-vue-js-app-with-docker-part-two/",
      "excerpt": "Vue is a great framework to develop user interfaces. It has experienced a great deal of growth in popularity since its initial release in 2014 and still continues to improve. This second part of the series will explain how to develop \"in\" a container and ship your app with a custom Docker workflow",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "616c2a23ce9a7f4c78ab7b88",
      "uuid": "641118c1-a7ef-47c6-bed1-b6d7fa01ab4e",
      "title": "Quick & Dirty: How to add a client search feature to your Ghost blog",
      "slug": "how-to-add-a-search-feature-to-your-ghost-cms-blog",
      "html": "<blockquote>Note: This article assumes that you have a basic idea about Ghost theme development. If you need a refresher, <a href=\"https://ghost.org/docs/themes/\">check out the official docs</a> before reading ahead.</blockquote><p>TL: DR - Take me to the code.</p><ul><li><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/partials/search.hbs\">The related partial</a></li><li><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\">The wrapper function</a></li><li><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/index.js\">The plugin registration</a> (starting @ line 18)</li><li><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/gulpfile.js\">The gulp task to build the web worker</a> (starting @ line 96)</li></ul><p>The content of these files might change in the future, but the logic will remain the same.</p><h2 id=\"considerations-for-development\">Considerations for development</h2><p>I created this feature with the following questions in mind:</p><ul><li>Where do I get the post data from? -&gt; <a href=\"https://ghost.org/docs/content-api/\">Ghost's Content API</a></li><li>Do I want to execute an HTTP request every time I make a search? -&gt; No</li><li>How do I store relevant information in the client? -&gt; I'll use a <a href=\"https://en.wikipedia.org/wiki/Search_engine_indexing\">clientside index</a></li><li>How do I create and search through an index? -&gt; With the fantastic library <a href=\"https://lunrjs.com/\">Lunr.js</a></li><li>Building an index takes time. How do I reduce stress on the main thread? -&gt; By using a dedicated <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\">Web Worker</a> to build the index every X hours</li></ul><p>Naturally, you could do the same thing on the server-side. I'm happy with how the result turned out though. So let's dive in.</p><h2 id=\"build-the-partial\">Build the partial</h2><blockquote>Link to Github: <a href=\"https://github.com/tq-bit/candidus-lite/blob/master/partials/search.hbs\">The related partial</a></blockquote><p>The result looks like this.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/10/image.png\" class=\"kg-image\" alt loading=\"lazy\"></figure><p>It will render all the results from my local index whenever a search is made by the user.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/10/image-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"885\" height=\"442\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/10/image-1.png 600w, https://blog.q-bit.me/content/images/2021/10/image-1.png 885w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"register-the-plugin\">Register the plugin</h2><p>To build an index, we need to feed it with data. We'll receive these from Ghost's content API, which requires an API key to be accessible.  So head over to your admin panel and <a href=\"https://ghost.org/integrations/custom-integrations/\">create a new integration</a>. </p><p>Then, <a href=\"https://ghost.org/help/using-the-editor/#using-code-injection\">inject the API key</a>, as well as the domain of your blog. </p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;script&gt;\nconst Q_GHOST_API_ROOT = 'https://blog.q-bit.me';\nconst Q_GHOST_API_KEY = 'content-api-key';\n&lt;/script&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, we can use the plugin <code>useLunrSearch</code> and extract the necessary functions: </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const { \n initLocalIndex, \n search, \n // ... other methods\n} = useLunrSearch(Q_GHOST_API_ROOT, Q_GHOST_API_KEY);\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's check the next two functions in detail now.</p><h2 id=\"initialize-a-local-index\">Initialize a local index</h2><p>We'll need to take the following three steps: </p><ol><li>Get the data from the API -&gt; Done by function <code><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\">fetchPosts</a></code> (line 123)</li><li>Create an index -&gt; Done by WebWorker's <code><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/workers/indexworker.js\">buildIndex</a></code></li><li>Save the index and a timestamp to local storage -&gt; Done by <code><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\">saveIndex</a></code> (line 113)</li></ol><p>Let's take a look at how it's done in detail.</p><h3 id=\"get-the-posts\">Get the posts</h3><p>We've passed the URL, as well as the API - key to the parent function <code>useLunrSearch</code>, so they're both available within the nested function's scope. Since we will fetch the posts only once to build our index, I felt free enough to set the limit to a bigger number. </p><p>In the <a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\">search.js</a> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const fetchPosts = async (limit = 9999) =&gt; {\n  if (!rootUrl) {\n    console.warn('No rootUrl url specified. Using relative path');\n  }\n  if (!key) {\n    throw new Error('No content api key found: Q_GHOST_API_KEY is undefined');\n  }\n\n  const url = rootUrl + path + '?limit=' + limit + '&amp;key=' + key;\n  const response = await fetch(url);\n  const { meta, posts } = await response.json();\n  return posts;\n};\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"build-the-index\">Build the index</h3><p>As creating an index is a memory-intensive task, it makes sense to offload it to a Web Worker. It'll do its thing on a separate thread and delivers the result back when it's ready.</p><blockquote>Make sure lunr.js is available in both, the search.js and the indexworker.js context - both files will be executed in separate contexts of the browser.</blockquote><p>In the <a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\"><code>search.js</code></a> - file </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">// register the worker\nconst indexWorker = new Worker('/assets/built/workers/indexworker.js');\n\n//  get the posts\nconst posts = await fetchPosts();\n\n// send them to the worker\nindexWorker.postMessage(posts);\n\n// receive the index back from the worker\nindexWorker.onmessage = (ev) =&gt; {\n const { data: serializedIndex } = ev;\n const lunrIndex = JSON.parse(serializedIndex);\n const timestamp = saveIndex(lunrIndex);\n return timestamp;\n};\n// ...\n</code></pre>\n<!--kg-card-end: markdown--><p>And then in the <code><a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/workers/indexworker.js\">indexworker.js</a></code> file: </p><ol><li>We'll create a <code>blueprint</code> variable to hold the serialized title and the URL</li><li>We'll receive this string back when searching for posts - it'll be our reference</li><li>Lunr then creates the index by classifying posts and adding documents to it</li><li>Finally, the index is serialized and returned to the calling function when it's requested</li></ol><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const buildIndex = (posts) =&gt; {\n  const documents = posts.map((post) =&gt; {\n    const blueprint = JSON.stringify({ // 1\n      title: post.title,\n      url: post.url,\n    });\n    return {\n      blueprint,\n      title: post.title,\n      excerpt: post.excerpt,\n      html: post.html,\n    };\n  });\n\n  const lunrIndex = lunr(function () {\n    this.ref('blueprint'); // 2\n    this.field('title');\n    this.field('excerpt');\n    this.field('html');\n    documents.forEach(function (doc) {\n      this.add(doc); // 3\n    }, this);\n  });\n  return lunrIndex;\n};\n\nonmessage = ({ data }) =&gt; {\n  const lunrIndex = buildIndex(data);\n  const serializedIndex = JSON.stringify(lunrIndex); // 4\n  postMessage(serializedIndex);\n};\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"store-the-result-in-local-storage-and-retrieve-it\">Store the result in local storage and retrieve it</h3><p>Now that we've got the index, we'll have to store it somewhere. The easiest way to do so turned out to be local storage. And to ensure it is regularly updated, we'll add a timestamp to it when it's saved.</p><p>In the <a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\"><code>search.js</code></a> - file </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const saveIndex = (lunrIndex) =&gt; {\n  const timestamp = new Date().getTime();\n  const payload = {\n    timestamp,\n    lunrIndex,\n  };\n  localStorage.setItem(localIndexName, JSON.stringify(payload));\n  return timestamp;\n};\n\nconst getIndex = () =&gt; {\n  const payload = JSON.parse(localStorage.getItem(localIndexName));\n  if (payload) {\n    return {\n      timestamp: payload.timestamp,\n      // Load the deserialized index \n      lunrIndex: lunr.Index.load(payload.lunrIndex),\n    };\n  }\n};\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"query-the-index-for-blueprints\">Query the index for blueprints</h2><p>And that's it. We can now use <code>getIndex</code> and query for something a user puts in. In my example, I use the <code>blueprints</code> (serialized title &amp; URL) to render a list of items. </p><p>In the <a href=\"https://github.com/tq-bit/candidus-lite/blob/master/assets/js/lib/search.js\"><code>search.js</code></a> - file</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const search = (ev) =&gt; {\n  const {\n    target: { value },\n  } = ev;\n  const { lunrIndex } = getIndex();\n  const blueprints = queryIndex(lunrIndex, value);\n  return renderQueryResults(value, blueprints);\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>If you are reading this post on my <a href=\"https://blog.q-bit.me/\">blog.q-bit.me</a>, try and press <code>CTRL</code> + <code>K</code> to see the plugin in action.</p><blockquote>This feature is part of my Ghost theme Candidus-Lite. If the post above helped you, I'd appreciate <a href=\"https://github.com/tq-bit/candidus-lite\">if you starred its repos on Github</a></blockquote>",
      "comment_id": "616c2a23ce9a7f4c78ab7b88",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-10-17T15:50:27.000+02:00",
      "updated_at": "2021-10-30T16:59:04.000+02:00",
      "published_at": "2021-10-17T18:35:40.000+02:00",
      "custom_excerpt": "This article attempts to give you an idea of how to implement a search feature for your own Ghost blog. You'll learn how to create your own index, store it on the clientside and query it for results.  In the related code repository, you can also find an implementation example. ",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/how-to-add-a-search-feature-to-your-ghost-cms-blog/",
      "excerpt": "This article attempts to give you an idea of how to implement a search feature for your own Ghost blog. You'll learn how to create your own index, store it on the clientside and query it for results.  In the related code repository, you can also find an implementation example. ",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "615985c374359d041d2c44b4",
      "uuid": "002f17c9-2d85-485b-b927-72620a94a402",
      "title": "Let's build Vue directives: Scrolling elements into view",
      "slug": "lets-build-vue-directives-scrolling-elements-into-view",
      "html": "<blockquote>TL: DR - take me to the code<br><br>1. <a href=\"https://codesandbox.io/s/v-scroll-vue-2-9rli3?file=/src/main.js\">Vue 2 Code Sandbox</a><br>2. <a href=\"https://codesandbox.io/s/v-scroll-vue-2-9rli3?file=/src/main.js\">Vue 3 Code Sandbox</a><br>3. <a href=\"https://v3.vuejs.org/guide/migration/custom-directives.html#overview.\">Difference between Vue 2 and Vue 3 implementation</a> </blockquote><p>It is one of those features that slowly but steadily found its way into most of the content-heavy pages, such as blogs or documentations. Scrolling elements into view gives your user an intuitive shortcut to the content they'd like to read about.</p><h2 id=\"reasons-for-a-vue-directive\">Reasons for a Vue directive</h2><p>You might wonder - why would I need Javascript, even more, a Vue directive for this? I can use built-in HTML and CSS properties, such as <code>href=\"#headline\"</code> in combination with <code>scroll: smooth</code>. </p><p>In fact, you can. If you don't mind a few limitations: </p><ul><li>A <code>fixed</code> navbar might be in the way of your heading</li><li>You have to give every heading a fixed id or create it with Javascript</li><li>Globally applied smooth scrolling sometimes leads to some funny side effects when using SPA routers</li></ul><p>You could arguably also use vanilla Javascript. Then again, the nature of Vue directives allows for a quick and reusable implementation.</p><blockquote>Please note that this article focuses on Vue 3, in which custom directives are handled slightly different than in Vue 2. Check out the linked code sandboxes in TL:DR for differences in <code>main.js</code> and the <code>vScroll.js</code> directive file.</blockquote><h2 id=\"setup-a-vue-3-project-with-vite\">Setup a Vue 3 Project with Vite</h2><p>We'll use <a href=\"https://vitejs.dev/guide/\">Vite</a> to spin up a basic application. You can alternatively use <a href=\"https://cli.vuejs.org/guide/\">Vue CLI</a>. </p><p>Change into a directory of your choice and type: </p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># 1: Init your project\nnpm init vite@latest # using Vite with npm\n# yarn create vite   # using Vite with yarn\n# vue create .       # using Vue CLI\n\n# 2: Change into the created folder and start the dev server\ncd vite-project\nnpm install\nnpm run dev\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"make-the-app-object-available-for-directive-registration\">Make the app object available for directive registration</h2><p>Before registering our custom directives, let's make a small adjustment in Vue's main file. It uses <code>createApp</code> on the fly, but we need the created app object to register components on. </p><blockquote>This step is optional, you could also chain <code>.directive()</code> as part of the createApp bootstrapping process.</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-js\">// Inside main.js: Change this \nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n\n// ------\n\n// to \nimport { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\n// ... register directives here\n\napp.mount('#app')\n</code></pre>\n<!--kg-card-end: markdown--><p>With <code>app.directive(directiveName, directiveFunction)</code>, we're now able to register our own directives everywhere in the app.</p><h2 id=\"create-the-scroll-directive\">Create the scroll directive</h2><p>For this purpose, we require two browser functions, both of which are available in all major browsers.</p><ul><li><code>domElement.getBoundingClientRect()</code> to receive the element's coordinates</li><li><code>window.scroll()</code> to scroll to the calculated part of the window</li></ul><p>What's left for us to do is to:</p><ul><li>calculate the difference between the current window position and the element (1)</li><li>make the window scroll to that calculated position (2)</li></ul><p>So let's move ahead and create a folder in the <code>/src</code> folder named <code>/directives</code>. Inside it, create a file named <code>vScroll.js</code> and paste the following code into it: </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const vScroll = {\n  mounted: (el) =&gt; {\n    el.style.cursor = 'pointer';\n    el.addEventListener('click', () =&gt; {\n      const coord = el.getBoundingClientRect().top + window.scrollY; //(1)\n      window.scroll({ top: coord, behavior: 'smooth' });  //(2)\n    });\n  },\n};\n\nexport default vScroll;\n</code></pre>\n<!--kg-card-end: markdown--><p>Now let's go back into the <code>main.js</code> file and register <code>vScroll</code>: </p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">import { createApp } from 'vue'\nimport App from './App.vue'\nimport vScroll from './directives/vScroll'\n\nconst app = createApp(App)\n\napp.directive('scroll', vScroll)\n\napp.mount('#app')\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"use-the-directive-on-the-template\">Use the directive on the template</h2><p>Now what's left to do is to check whether the directive works as intended. Let's go ahead and replace the content of the <code>App.vue</code> file with a <a href=\"https://blog.q-bit.me/lorem-ipsum-template/\">Lorem Ipsum template</a>.</p><p>Try adding <code>v-scroll</code> to any of the h2 - tags. Now, when clicking on them, they will be smoothly scrolled to the upper part of the window.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;h2 v-scroll&gt;Cursus mattis&lt;/h2&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"what-about-the-fixed-navbar-problem\">What about the fixed navbar problem?</h2><p>The solution in a nutshell: You can bind values to directives! In this case to add a vertical offset when scrolling to an element. These bindings can be accessed the same way as the element itself, given they are passed as an argument in the directive's lifecycle function. In our case, <code>binding.value</code> will resolve to a number we want to subtract from the scroll-top position. </p><p>In the <code>vScroll.js</code> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-js\">const vScroll = {\n  mounted: (el, binding) =&gt; {\n    el.style.cursor = 'pointer';\n    el.addEventListener('click', () =&gt; {\n      let coord = 0;\n      coord = binding.value\n        ? el.getBoundingClientRect().top + window.scrollY - binding.value\n        : el.getBoundingClientRect().top + window.scrollY;\n        window.scroll({ top: coord, behavior: 'smooth' });\n    });\n  },\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>In the HTML template: </p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;h2 v-scroll=&quot;200&quot;&gt;\n  Pharetra magna\n&lt;/h2&gt;\n&lt;p&gt;\n  Congue quisque egestas diam in arcu cursus euismod quis viverra. \n  Pharetra magna ac placerat vestibulum lectus mauris ultrices.....\n&lt;/p&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>If everything went well, you now have a functional directive you can include in any new or existing project.</p><h2 id=\"theres-more-to-it\">There's more to it</h2><p>As you can see, we achieved this functionality fairly easily. You can move even further and extend the directive. For example, dynamically add an icon before the text or mutate the element's style whenever a user interacts with it. If you'd like to get an even deeper understanding of Vue directives, make sure to take a look into the official docs for Vue 3. </p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://v3.vuejs.org/guide/custom-directive.html\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Custom Directives | Vue.js</div><div class=\"kg-bookmark-description\">Vue.js - The Progressive JavaScript Framework</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://v3.vuejs.org/images/icons/apple-icon-152x152.png\" alt=\"\"><span class=\"kg-bookmark-author\">Vue.js</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://v3.vuejs.org/logo.png\" alt=\"\"></div></a></figure>",
      "comment_id": "615985c374359d041d2c44b4",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-10-03T12:28:19.000+02:00",
      "updated_at": "2021-11-08T18:30:26.000+01:00",
      "published_at": "2021-10-03T17:12:10.000+02:00",
      "custom_excerpt": "Directives are one of Vue's most powerful concepts. They provide direct access to a DOM element over its lifecycle. And you're not restricted to the built-in ones but can also write your own custom directives. ",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/lets-build-vue-directives-scrolling-elements-into-view/",
      "excerpt": "Directives are one of Vue's most powerful concepts. They provide direct access to a DOM element over its lifecycle. And you're not restricted to the built-in ones but can also write your own custom directives. ",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "61389e017fa8590405960711",
      "uuid": "c5970066-15f4-46a0-ab28-48e0e177d88d",
      "title": "How to self-host Google fonts for your web application | Part 1/2: DIY vs. CDN",
      "slug": "how-to-self-host-google-fonts-part-one",
      "html": "<h2 id=\"motivation-selfhosting-vs-using-a-cdn\">Motivation: Selfhosting vs. using a CDN</h2><p>The following section deals with some concerns regarding the GDPR regulations for European users. <strong>I would like to emphasize that this is no legal advice and that you should contact a lawyer before using any of these practices. </strong></p><h3 id=\"google-fonts-and-convenience\">Google fonts and convenience </h3><p>Before you start hosting fonts yourself, you should consider if it adds value to your product. Google's CDNs do some real heavy lifting for you. Not only do they provide you just the styles you need, but also apply some smart response settings: </p><ul><li>Cache headers on the client-side</li><li>Predefined <code>@font-face</code> rules &amp; preloading</li><li>Browser specific- &amp; compatible fonts</li></ul><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"946\" height=\"384\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image.png 600w, https://blog.q-bit.me/content/images/2021/09/image.png 946w\" sizes=\"(min-width: 720px) 720px\"><figcaption>When loading fonts from a CDN, Google's servers take care of applying client-side caching.</figcaption></figure><p>To achieve comparable results on your own machine, you must customize it on your webserver. You can read on how to do it in the <a href=\"how-to-self-host-google-fonts-part-one/#configure-your-server-to-send-a-cache-header\">second part</a> of the series.</p><h3 id=\"google-fonts-and-privacy-brace-yourself\">Google fonts and privacy (brace yourself)</h3><p>With this convenience comes some bitter taint. According to <a href=\"https://developers.google.com/terms/\">Google's Terms of Usage for their APIs</a>:  (Section 3, Your API Clients, called on 08.09.2021), Google actively monitors access to their services, including the Fonts API.</p><blockquote>The APIs are designed to help you enhance your websites and applications (\"API Client(s)\"). YOU AGREE THAT GOOGLE MAY MONITOR USE OF THE APIS TO ENSURE QUALITY, IMPROVE GOOGLE PRODUCTS AND SERVICES, AND VERIFY YOUR COMPLIANCE WITH THE TERMS.</blockquote><p>Also, <a href=\"https://developers.google.com/fonts/faq\">according to their FAQ</a> (called on 08.09.2021), the statement on what data are collected seems rather fishy:</p><blockquote>Q: What does using the Google Fonts API mean for the privacy of my users?<br>A: <strong>The Google Fonts API is designed to limit the collection, storage, and use of end-user data to what is needed to serve fonts efficiently.</strong> [...] Aggregate usage numbers track how popular font families are, and are published on our <a href=\"https://fonts.google.com/analytics\">analytics page</a>. We use data from Google’s web crawler to detect which websites use Google fonts. This data is published and accessible in the <a href=\"https://goo.gl/5HeqYf\">Google Fonts BigQuery database</a>.</blockquote><p>In plain English, this means something like<strong> </strong>(this is no legal advice, just my subjective interpretation):</p><ul><li>You, as a website dev/admin, agree that Google monitors your user's activity whenever one or more font files are requested from their CDN</li><li>Also, Google does collect something, but they don't really tell you what</li></ul><p>At a bare minimum, based on what they present on their analytics site, they're receiving: </p><ul><li>The user's operating system</li><li>The user's browser</li><li>The requested font(s)</li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-2.png\" class=\"kg-image\" alt=\"an image that shows the analytics site of google fonts\" loading=\"lazy\" width=\"1834\" height=\"897\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-2.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/09/image-2.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/09/image-2.png 1600w, https://blog.q-bit.me/content/images/2021/09/image-2.png 1834w\" sizes=\"(min-width: 720px) 720px\"></figure><p>It is also a very common practice to survey access - log files. Assuming that is the (very likely) case, then Google also receives: </p><ul><li>The user's the IP address</li><li>A timestamp of when a font has been requested</li></ul><p>And this is where it gets legally complicated. A judgment of the European court in 2016 has interpreted IP addresses as personal data as <a href=\"https://curia.europa.eu/juris/document/document.jsf?text=&amp;docid=184668&amp;pageIndex=0&amp;doclang=en&amp;mode=lst&amp;dir=&amp;occ=first&amp;part=1&amp;cid=1116945\">per the following decree</a>:</p><blockquote><a href=\"https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=LEGISSUM:l14012\">Article 2(a) of Directive 95/46/EC</a> of the European Parliament [...] must be interpreted as meaning that a dynamic IP address registered by an online media services provider [...] makes accessible to the public constitutes personal data [...] which enable it to identify the data subject with additional data which the internet service provider has about that person.</blockquote><p>If you're wondering: 'Why is this a problem?': </p><blockquote>48) Thus, it appears that the online media services provider has the means which may likely reasonably be used in order to identify the data subject, with the assistance of other persons, namely the competent authority and the internet service provider, on the basis of the IP addresses stored. </blockquote><p>Again, let me try to rephrase (and again, this is no legal advice): </p><ul><li>If Google receives your user's IP address over the fonts API, they're collecting personal data. Thereby, Google becomes your user's data processor</li><li>Also, Google (most certainly) has the means to identify your user based on their IP address and thereby can perform profiling</li><li>As a consequence, you need your user's consent when it comes to data processing</li><li>According to law, <strong>if a user does not agree</strong> to make their personal information (IP address) available to Google, <strong>you are responsible to prevent the fonts from loading</strong></li></ul><p>The resume out of this for me was:</p><ul><li>You have to ask your user for consent (in the EU) and take appropriate action if consent is withdrawn (that is perfectly okay if you already have such a system in place)</li><li>You save yourself a lot of headaches by just going with the self-hosting approach</li></ul><h2 id=\"google-fonts-and-performance-in-terms-of-ux\">Google fonts and performance (in terms of UX)</h2><p>It might seem obvious that in terms of speed, almost nobody beats the big G. They have data centers all around the world that deliver fonts blazingly fast.</p><p>So in the case of self-hosting, we must make sure that during the time fonts are loaded, the user is still able to see something more than a blank page. This will be rewarded not only by happy readers but also by Lighthouse Scoring.</p><p>Using the online approach has us covered. By declaring <code>display=swap</code>, fonts will not block, but rather be switched out once the target font family is available.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;link href=&quot;https://fonts.googleapis.com/css2?family=Open+Sans&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>While fonts load, by default, a browser will block other content from getting rendered. According to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display\">MDN</a>: <strong>font-display: swap</strong> gives the font face an extremely small block period and an infinite swap period.</blockquote><p>Fortunately, this behavior can easily be replicated, and even extended, by preloading the necessary fonts. </p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;link rel=&quot;preload&quot; as=&quot;font&quot; href=&quot;https://fonts.googleapis.com/css2?family=Open+Sans&amp;display=swap&quot; onload=&quot;this.onload=null;this.rel='stylesheet'&quot;&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"who-wins\">Who wins?</h2><p>Even though the CDN way is convenient and fairly easy to implement, my winner in this race is the self-hosting approach. Had I a system in place which does the legal consent gathering for me, I'd also vouch for the former. It just seems hardly reasonable to go through such a legal gauntlet for a blogging website.</p><p>If you would like to host your own Google Fonts, read ahead for the second part of this series: <a href=\"https://blog.q-bit.me/how-to-self-host-google-fonts-part-one\">Download and provision.</a></p>",
      "comment_id": "61389e017fa8590405960711",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-09-08T13:26:57.000+02:00",
      "updated_at": "2021-09-15T10:00:00.000+02:00",
      "published_at": "2021-09-15T10:00:00.000+02:00",
      "custom_excerpt": "Google provides plenty of web services, one of which is Google Fonts. At the same time, using these services is as simple as opening a window (or browser tab, literally speaking). You might have a good reason though not to use these, and instead, provide font files from your own sources.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/how-to-self-host-google-fonts-part-one/",
      "excerpt": "Google provides plenty of web services, one of which is Google Fonts. At the same time, using these services is as simple as opening a window (or browser tab, literally speaking). You might have a good reason though not to use these, and instead, provide font files from your own sources.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "61332806098a7a0406bf0bcb",
      "uuid": "9b96e837-fffc-4b9a-92e2-a602c2884e5f",
      "title": "How to self-host Google fonts for your web application | Part 2/2: Download and provision",
      "slug": "how-to-self-host-google-fonts-part-two",
      "html": "<p>In the <a href=\"https://blog.q-bit.me/how-to-self-host-google-fonts-part-one\">first part</a> of this series, I've attempted to compare self-hosting Google fonts with having them provided by Google. My personal winner was the former option and this article describes how to implement it.</p><h2 id=\"recapitulation-diy-or-cdn\">Recapitulation: DIY or CDN?</h2><p>In a nutshell: Should you host your own fonts?</p><ul><li>Are you serving your website to European citizens and don't want all that additional GDPR hassle (user consent, an extensive privacy policy, legal notes, ... you name it)?</li><li>Do you want more control over your served content? And do you feel confident to adjust some configuration on your server?</li><li>Would you like to rely less on the big player's infrastructure to serve critical files? Or are you tired of consultants and lawyers telling you to do so?</li></ul><p>If you find yourself among these three, you are likely a good candidate.</p><h2 id=\"download-the-fonts-you-would-like-to-self-host\">Download the fonts you would like to self-host</h2><p>For the following steps, I'll assume you have the following project structure.</p><!--kg-card-begin: markdown--><pre><code class=\"language-bash\">/\n| - fonts/\n| - styles/\n|   | - main.css\n| - index.html\n</code></pre>\n<!--kg-card-end: markdown--><ul><li>Head over to <a href=\"https://fonts.google.com/\">https://fonts.google.com/</a> and select your favorite font(s)</li><li>Click on 'Download family' and confirm the download</li></ul><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-3.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1729\" height=\"334\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-3.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/09/image-3.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/09/image-3.png 1600w, https://blog.q-bit.me/content/images/2021/09/image-3.png 1729w\"></figure><ul><li>Save the downloaded file in your project folder</li><li>Unzip the directory. </li></ul><p>You will now have a variety of <code>.ttf</code> files available. Each of these files represents a specific font style</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-4.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"272\" height=\"384\"></figure><blockquote>You can achieve even better results using <a href=\"https://google-webfonts-helper.herokuapp.com/fonts\">Google fonts helper</a>. It provides you more modern formats with fallback options &amp; CSS snippets.</blockquote><h2 id=\"add-the-font-face-rules-to-your-css\">Add the font-face rules to your CSS</h2><p>Now that we have the fonts available, we must configure them in our styles. This is done by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face\">@font-face rule</a>.</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 500;\n  src: url('../fonts/Roboto-Regular.ttf');\n  font-display: swap;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>You can then start applying the <code>font-family</code> as you usually would:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">.custom-font {\n  font-family: 'Roboto', 'sans-serif'\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, apply the class <code>custom-font</code> to your HTML. Notice how the style, followed by the font file, is then loaded into the browser:</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-5.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1848\" height=\"804\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-5.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/09/image-5.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/09/image-5.png 1600w, https://blog.q-bit.me/content/images/2021/09/image-5.png 1848w\"></figure><p>So far so good, but there are still some improvements to be made here. Google still does some important things for us, some of which are:</p><ul><li>Providing browser-specific font types</li><li>Taking care of preloading fonts without blocking the browser</li><li>Setting the correct headers for cache control</li></ul><p>We can, however, set these features up ourselves, so let's go ahead and do that</p><h2 id=\"get-the-browser-specificversion-of-your-font\">Get the browser-specific - version of your font </h2><p>Google's CDN automatically serves you the font format that is supported by your browser. And while the <code>.ttf</code> file from earlier works, <code>.woff</code> formatted fonts are served faster and <a href=\"https://caniuse.com/woff\">supported by all modern browsers</a>.  </p><blockquote>Using the <a href=\"https://google-webfonts-helper.herokuapp.com/fonts\">Google fonts helper</a> app saves you a bit of manual labor here. </blockquote><p>Fortunately, there's a simple trick to figure the correct font to download. Let's take <strong>Roboto</strong> as an example again. </p><ul><li>Head to the browser you require the fonts for (or use a browser simulator like <a href=\"https://www.browserling.com/\">Browserling</a>)</li><li>Parse the URL you found on Google fonts and navigate to it</li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-7.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"309\" height=\"322\"></figure><ul><li>You will find a CSS file that has the optimal <code>@font-face</code> CSS rules for your browser</li></ul><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-9.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"780\" height=\"426\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-9.png 600w, https://blog.q-bit.me/content/images/2021/09/image-9.png 780w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Some examples for other font formats and browsers using them are </p><ul><li><strong>Chromium-based Browsers &amp; Firefox</strong> | Font Type <code>.woff2</code><br><a href=\"https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu72xKOzY.woff2\">https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu72xKOzY.woff2</a></li><li><strong>Internet Explorer 10/11</strong> | Font Type <code>.woff</code><br><a href=\"https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Me5g.woff\">https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Me5g.woff</a></li><li><strong>Safari 4</strong> | Font Type <code>.tff</code><br><a href=\"https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Me5Q.ttf\">https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Me5Q.tt</a></li></ul><p>After downloading the font and replacing the source URL in the <code>main.css</code> file, everything still looks as expected: </p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-10.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1717\" height=\"849\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-10.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/09/image-10.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/09/image-10.png 1600w, https://blog.q-bit.me/content/images/2021/09/image-10.png 1717w\"></figure><h2 id=\"configure-your-app-to-preload-fonts\">Configure your app to preload fonts</h2><p>By default, loading CSS happens synchronously and thereby <a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path\">blocks the browser's rendering process</a>. This also includes our <code>@font-face</code> CSS rules. Before rendering text, the browser must first load the necessary fonts. This takes time and is bothersome for users. Luckily, it is also fairly simple to circumvent. </p><blockquote>With this approach, textual content is rendered before the fonts are available. Then, once loaded, they're applied - the fonts are swapped.</blockquote><p>In your <code>index.html</code>: </p><ul><li>Instead of requesting the CSS file that deals with fonts with <code>rel=\"stylesheet\"</code>, add the <code>rel=\"preload\"</code> and <code>as=font</code> attributes</li><li>Then, use the <code>window.onload</code> event to overwrite the <code>rel</code> attribute once the HTML is done loading</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!-- Replace --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;./styles/main.css&quot;&gt;\n\n&lt;!-- With --&gt;\n&lt;link rel=&quot;preload&quot; as=&quot;font&quot; href=&quot;./styles/main.css&quot; onload=&quot;this.onload=null;this.rel='stylesheet'&quot;&gt;\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>This trick alone boosted my lighthouse score by an unbelievable amount of 8%</blockquote><h2 id=\"configure-your-server-to-send-a-cache-header\">Configure your server to send a cache header</h2><p>To demonstrate this, I use Nginx v1.18 on a 5$ Digital Ocean Droplet: </p><ul><li>SSH into your droplet with <code>ssh root@&lt;ip-adress&gt;</code></li><li>Open the default Nginx server config <code>nano /etc/nginx/sites-endabled/default/</code></li><li>Add the following wildcard rule right above the first <code>location</code> to apply a cache of 30 days <em>(=2592000 seconds) </em>for static assets<em> </em></li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-bash\"># Set cache headers for all css and font files\n# This header can also be extended for other static content\nlocation ~* \\.(css|ttf|woff|woff2) {\n  add_header Pragma public;\n  add_header Cache-control &quot;public max-age=2592000&quot;;\n}\n\n# location / { ... }\n</code></pre>\n<!--kg-card-end: markdown--><ul><li>Use <code>systemctl reload nginx</code> to gracefully restart Nginx</li><li>Move your files to the droplet using Linux' <code>scp</code> or, alternatively, <a href=\"https://filezilla-project.org/\">Filezilla</a></li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-bash\"># Copy the whole directory to the droplet \n# Note that I am using /test/ as a path instead of just / \n# as scp recursively copies the whole folder structure\nscp -r &lt;path-to-project&gt;/test/ root@&lt;droplet-ip&gt;:/var/www/html/\n</code></pre>\n<!--kg-card-end: markdown--><p>Once that is done, try and access your droplet by its IP address. You should see something like this: </p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/09/image-11.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1847\" height=\"949\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/09/image-11.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/09/image-11.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/09/image-11.png 1600w, https://blog.q-bit.me/content/images/2021/09/image-11.png 1847w\"></figure><p>If you made it here in one piece (especially if you've read the bit about data privacy), you're now the proud owner of a website with its own instance of Google Fonts. </p><h2 id=\"further-reading-resources\">Further reading &amp; resources</h2><p>There are more excellent projects and articles on the internet that deal with this topic. </p><ul><li>Using a web framework? Use 'Fontsource' to install fonts with npm:<br><a href=\"https://fontsource.org/docs/introduction\">https://fontsource.org/docs/introduction</a></li><li>The cost of moving from Google Fonts to self-hosted web fonts: <br><a href=\"https://jeremenichelli.io/2020/07/google-fonts-self-host-web-fonts/\">https://jeremenichelli.io/2020/07/google-fonts-self-host-web-fonts/</a></li><li>A list of popular Google Fonts pairings: <br><a href=\"https://www.w3schools.com/howto/howto_google_fonts_pairings.asp\">https://www.w3schools.com/howto/howto_google_fonts_pairings.asp</a></li></ul>",
      "comment_id": "61332806098a7a0406bf0bcb",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-09-04T10:02:14.000+02:00",
      "updated_at": "2021-09-15T10:00:00.000+02:00",
      "published_at": "2021-09-15T10:00:00.000+02:00",
      "custom_excerpt": "They are everywhere. For a good reason as well - typography plays a big role in UI design, and Google provides designers and developers a simple solution by providing popular fonts over their CDN.  You might, however, have good reason to serve these from your own server.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/how-to-self-host-google-fonts-part-two/",
      "excerpt": "They are everywhere. For a good reason as well - typography plays a big role in UI design, and Google provides designers and developers a simple solution by providing popular fonts over their CDN.  You might, however, have good reason to serve these from your own server.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60fd83a32dcbe203bf992467",
      "uuid": "4f275b94-6c4b-4f1e-b15d-f24210f27f5a",
      "title": "How to monitor the progress of a Javascript fetch - request and cancel it on demand.",
      "slug": "monitoring-and-canceling-a-javascript-fetch-request",
      "html": "<p>TL: DR -&gt; Take me to the code: <a href=\"https://github.com/tq-bit/fetch-progress\">https://github.com/tq-bit/fetch-progress</a></p><p><a href=\"https://blog.q-bit.me/make-api-requests-with-javascript/\">In an earlier post,</a> I've already given an overview of how to interact with an API using fetch. In this article, I'd like to dig deeper into two more detailed use-cases:</p><ul><li>Monitor the download progress while making an HTTP request.</li><li>Gracefully cancel a request by a user's input.</li></ul><p>If you would like to follow along, you can use this Github branch to get started. It includes no Javascript, just some styles and HTML: <a href=\"https://github.com/tq-bit/fetch-progress/tree/get-started\">https://github.com/tq-bit/fetch-progress/tree/get-started</a>. </p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/08/Screenshot-from-2021-08-15-18-29-17.png\" class=\"kg-image\" alt=\"an image that shows a download progressbar, a button to start a fetch request and a button to cancel it\" loading=\"lazy\" width=\"584\" height=\"201\"><figcaption>This is the UI we will start off with. The progress indicator will visualize the fetch - progress&nbsp;</figcaption></figure><p>So spin up your favorite code editor and let's dive in.</p><h2 id=\"create-the-basic-fetch-request\">Create the basic fetch request</h2><p>Before starting with the advanced stuff, let's build up a simple function. The task is to develop a piece of utility code that allows you to search for universities. Fortunately, <a href=\"https://github.com/Hipo\">Hipo</a> has just the tool to build up upon.</p><ul><li>I'm using <a href=\"https://github.com/Hipo/university-domains-list\">this repository</a>'s hosted API as a starting place. </li><li>Its root URL is <a href=\"http://universities.hipolabs.com/\">http://universities.hipolabs.com/</a>. </li><li>I'd like to restrict my search to all universities in the USA with a query.</li><li>On the technical side, I'd like to keep my fetch logic inside a wrapper function. </li></ul><p>That being said, let's start by adding the following code to the <code>client.js</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">export default function http(rootUrl) {\n  let loading = false;\n\n  let chunks = [];\n  let results = null;\n  let error = null;\n\n\n  // let controller = null; // We will get to this variable in a second\n\n  const json = async (path, options,) =&gt; {\n    loading = true\n\n    try {\n      const response = await fetch(rootUrl + path, { ...options });\n\n      if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) {\n        results = await response.json();\n        return results\n      } else {\n        throw new Error(response.statusText)\n      }\n    } catch (err) {\n      error = err\n      results = null\n      return error\n    } finally {\n      loading = false\n    }\n  }\n\n  return { json }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, let's import this function into the <code>main.js</code> file and initialize it: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Import the fetch client and initalize it\nimport http from './client.js';\nconst { json } = http('http://universities.hipolabs.com/');\n\n// Grab the DOM elements\nconst progressbutton = document.getElementById('fetch-button');\n\n// Bind the fetch function to the button's click event\nprogressbutton.addEventListener('click', async () =&gt; {\n  const universities = await json('search?country=United+States');\n  console.log(universities);\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Clicking on the <strong>Fetch</strong> - button will now print us the requested universities to our console: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/08/Screenshot-from-2021-08-15-19-01-36.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1009\" height=\"244\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/08/Screenshot-from-2021-08-15-19-01-36.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/08/Screenshot-from-2021-08-15-19-01-36.png 1000w, https://blog.q-bit.me/content/images/2021/08/Screenshot-from-2021-08-15-19-01-36.png 1009w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"rebuild-the-jsonmethod\">Rebuild the .json() - method</h2><p>To monitor progress, we need to rebuild a good part of the standard <code>.json()</code> method. It also implicates that we will also have to take care of assembling the response body, chunk by chunk. </p><blockquote>I've written an article about <a href=\"https://blog.q-bit.me/use-node-streams-to-upload-files/\">handling Node.js streams</a> earlier. The approach shown here is quite similar.</blockquote><p>So let's add the following to the <code>client.js</code> file, right below the <code>json</code> function: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">export default function http(rootUrl) { \n\n  // ... previous functions\n  const _readBody = async (response) =&gt; {\n    const reader = response.body.getReader();\n    \n    // Declare received as 0 initially\n    let received = 0;\n\n    // Loop through the response stream and extract data chunks\n    while (loading) {\n      const { done, value } = await reader.read();\n      if (done) {\n        // Finish loading \n        loading = false;\n      } else {\n        // Push values to the chunk array\n        chunks.push(value);\n      }\n    }\n\n    // Concat the chinks into a single array\n    let body = new Uint8Array(received);\n    let position = 0;\n\n    // Order the chunks by their respective position\n    for (let chunk of chunks) {\n      body.set(chunk, position);\n      position += chunk.length;\n    }\n\n    // Decode the response and return it\n    return new TextDecoder('utf-8').decode(body);\n  }\n  return { json }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p> Next, let's replace <code>response.json()</code> as follows:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">  // results = response.json();\n  // return results;\n  results = await _readBody(response)\n  return JSON.parse(results)\n</code></pre>\n<!--kg-card-end: markdown--><p>The response in the browser is still the same as previously - a decoded JSON object. As the response's body itself is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/getReader\">readable stream</a>, we can now monitor whenever a new piece of data is being read or whether the stream is closed yet.</p><h2 id=\"get-the-maximum-and-current-data-length\">Get the maximum and current data length</h2><p>The two core numbers for progress monitoring are found here:</p><ul><li>The <code>content-length</code> header from the response, the variable <code>length</code>.</li><li>The cumulated <code>length</code> of the received data chunks, variable <code>received</code>. </li></ul><blockquote>Note that this function does not work if the <code>content-length</code> header is not configured on the serverside. </blockquote><p>As we already have the variable <code>received</code> available,  let's add <code>content-length</code> to our <code>_readBody</code> function: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">  const _readBody = async (response) =&gt; {\n    const reader = response.body.getReader();\n    \n    // This header must be configured serverside\n    const length = +response.headers.get('content-length'); \n    \n    // Declare received as 0 initially\n    let received = 0; \n  // ...\n  if (done) {\n      // Finish loading\n      loading = false;\n    } else {\n      // Push values to the chunk array\n      chunks.push(value);\n      \n      // Add on to the received length\n      received += value.length; \n    }\n  }\n</code></pre>\n<!--kg-card-end: markdown--><p>With that, we have all relevant indicator values available. What is missing is a way to emit them to the calling function. That can easily be done by using a Javascript framework's reactive features, like React Hooks or Vue's composition API. In this case, however, we'll stick with a builtin browser feature called <code>CustomEvent</code>. </p><h2 id=\"make-fetch-progress-available-with-events\">Make fetch progress available with events </h2><p>To wrap the monitoring feature up, let's create two custom events: </p><ul><li>One for whenever a data chunk is read, event <code>fetch-progress</code>.</li><li>One for when the fetch request is finished, event <code>fetch-finished</code>.</li></ul><p>Both events will be bound to the window object. Like this, they'll be available outside of the <code>http</code> - function's scope.</p><p>Inside the <code>_readBody()</code>, adjust the while... loop as follows: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">  const _readBody = async (response) =&gt; {\n    // ...\n    \n    // Loop through the response stream and extract data chunks\n    while (loading) {\n      const { done, value } = await reader.read();\n      const payload = { detail: { received, length, loading } }\n      const onProgress = new CustomEvent('fetch-progress', payload);\n      const onFinished = new CustomEvent('fetch-finished', payload)\n\n      if (done) {\n        // Finish loading\n        loading = false;\n        \n        // Fired when reading the response body finishes\n        window.dispatchEvent(onFinished)\n      } else {\n        // Push values to the chunk array\n        chunks.push(value);\n        received += value.length;\n        \n        // Fired on each .read() - progress tick\n        window.dispatchEvent(onProgress); \n      }\n    }\n    // ... \n  }\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"display-progress-in-the-ui\">Display progress in the UI</h2><p>The final step to take is catching both custom events and change the progress bar's value accordingly. Let's jump over to the <code>main.js</code> file and adjust it as follows: </p><ul><li>Grab some relevant DOM elements</li><li>Add the event listener for <code>fetch-progress</code></li><li>Add the event listener for <code>fetch-finished</code></li><li>We can then access the progress values by destructuring from the <code>e.detail</code> property and adjust the progress bar value.</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Import the fetch client and initalize it\nimport http from './client.js';\n\n// Grab the DOM elements\nconst progressbar = document.getElementById('progress-bar');\nconst progressbutton = document.getElementById('fetch-button');\nconst progresslabel = document.getElementById('progress-label');\nconst { json } = http('http://universities.hipolabs.com/');\n\nconst setProgressbarValue = (payload) =&gt; {\n  const { received, length, loading } = payload;\n  const value = ((received / length) * 100).toFixed(2);\n  progresslabel.textContent = `Download progress: ${value}%`;\n  progressbar.value = value;\n};\n\n// Bind the fetch function to the button's click event\nprogressbutton.addEventListener('click', async () =&gt; {\n  const universities = await json('search?country=United+States');\n  console.log(universities);\n});\n\nwindow.addEventListener('fetch-progress', (e) =&gt; {\n  setProgressbarValue(e.detail);\n});\n\nwindow.addEventListener('fetch-finished', (e) =&gt; {\n  setProgressbarValue(e.detail);\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>And there we have it - you can now monitor your fetch request's progress. </p><p>Still, there are some adjustments to be made: </p><ul><li>Reset the scoped variables</li><li>Allow the user to cancel the request</li></ul><p>If you've come this far with reading, stay with me for a few more lines. </p><h2 id=\"reset-the-scoped-variables\">Reset the scoped variables</h2><p>This is as straightforward as it sounds and gives us a nice, reusable function. </p><p>Add the following right under the <code>_readBody()</code> - function in your <code>client.js</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const _resetLocals = () =&gt; {\n  loading = false;\n\n  chunks = [];\n  results = null;\n  error = null;\n\n  controller = new AbortController();\n}\n</code></pre>\n<!--kg-card-end: markdown--><blockquote>Remeber that you must call <code>resetLocals()</code> in the <code>json()</code> function first. </blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">export default function http(rootUrl) {\n  let loading = false;\n\n  let chunks = [];\n  let results = null;\n  let error = null;\n\n  let controller = null; // Make sure to uncomment this variable\n  const json = async (path, options,) =&gt; {\n    _resetLocals();\n    loading = true\n  // ... rest of the json function\n  }\n// ... rest of the http function\n</code></pre>\n<!--kg-card-end: markdown--><p>With the above function, we also brought in a new object called <code>AbortController</code>. As the name suggests, we can use it to cut an active request.</p><h2 id=\"cancel-an-ongoing-request\">Cancel an ongoing request</h2><p>Using the created AbortController, we can now create a signal. It serves as a communication interface between the controller itself and the outgoing HTTP request. Imagine it like a built-in kill switch. </p><p>To set it up, modify your <code>client.js</code> file like this:</p><ul><li>Create the signal &amp; pass it into the fetch request options.</li><li>Create a new function that calls the controller's abort function.</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const json = async (path, options,) =&gt; {\n  _resetLocals();\n  let signal = controller.signal; \n  loading = true\n\n  try {\n    const response = await fetch(rootUrl + path, { signal, ...options });\n  // ... rest of the trycatch function\n  }\n// ... rest of the json function\n}\n\n// Cancel an ongoing fetch request\nconst cancel = () =&gt; {\n  _resetLocals();\n  controller.abort();\n};\n\n// Make sure to export cancel\nreturn { json, cancel }\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, let's jump over to <code>main.js</code> and bind the event to our second button</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// ... other variable declarations\nconst abortbutton = document.getElementById('abort-button');\nconst { json, cancel } = http('http://universities.hipolabs.com/');\n\n// ... other functions and event listeners\nabortbutton.addEventListener('click', () =&gt; {\n  cancel()\n  alert('Request has been cancelled')\n})</code></pre>\n<!--kg-card-end: markdown--><p>If you now hit <strong>Fetch</strong> and <strong>Cancel</strong> <strong>Request</strong> right after, you will see an alert indicating that the request, even if it returns an HTTP status of 200, returns no data.</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/08/Screenshot-from-2021-08-16-17-22-52.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1850\" height=\"1022\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/08/Screenshot-from-2021-08-16-17-22-52.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/08/Screenshot-from-2021-08-16-17-22-52.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/08/Screenshot-from-2021-08-16-17-22-52.png 1600w, https://blog.q-bit.me/content/images/2021/08/Screenshot-from-2021-08-16-17-22-52.png 1850w\"></figure><h2 id=\"what-next\">What next?</h2><p>Unfortunately, by the time I researched for this article, I could not find a common way to monitor upload progress. The official whatwg Github repository has an <a href=\"https://github.com/whatwg/fetch/issues/607\">open issue</a> on a feature named <code>FetchObserver</code>. However, it seems we'll have to be patient for it to be implemented. Perhaps, it will make the features described in this article easier as well. The future will tell.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/whatwg/fetch/issues/607\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">FetchObserver (for a single fetch) · Issue #607 · whatwg/fetch</div><div class=\"kg-bookmark-description\">In #447 (comment) @jakearchibald sketched some APIs based on @stuartpb&amp;#39;s work which @bakulf then implemented: https://developer.mozilla.org/en-US/docs/Web/API/FetchObserver https://dxr.mozilla....</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.com/fluidicon.png\" alt=\"\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">whatwg</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opengraph.githubassets.com/2944d5ae231d4f544712eb2a171de22a01191e4296c43a661203c19d79c657b4/whatwg/fetch/issues/607\" alt=\"\"></div></a></figure>",
      "comment_id": "60fd83a32dcbe203bf992467",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-07-25T17:30:43.000+02:00",
      "updated_at": "2021-08-20T10:00:00.000+02:00",
      "published_at": "2021-08-20T10:00:00.000+02:00",
      "custom_excerpt": "Waiting blows. That goes for many situations in life, including when a website you visit is busy loading new data. However, it's usually helpful to visualize that something is happening in the background. Or be able to pull the plug. Read on to find out how that's to be done with the fetch API.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/monitoring-and-canceling-a-javascript-fetch-request/",
      "excerpt": "Waiting blows. That goes for many situations in life, including when a website you visit is busy loading new data. However, it's usually helpful to visualize that something is happening in the background. Or be able to pull the plug. Read on to find out how that's to be done with the fetch API.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60e9e2604eacaf03c46bea75",
      "uuid": "edda420e-4908-4696-a4f8-a456cf1d3439",
      "title": "A step-by-step guide to developing and deploying Vue apps with docker, part one",
      "slug": "how-to-develop-and-deploy-a-vue-js-app-with-docker-part-one",
      "html": "<p><a href=\"https://blog.q-bit.me/quick-dirty-how-to-deploy-a-fullstack-vue-js-app-with-a-working-node-js-backend/\">Previously</a>, I've described a very simple way to develop and deploy a Vue.js app using a combination of <code>git</code> and <code>npm</code>. This works fine to quickly prototype an app and see how it behaves in the wild. In case you're in for a productive project, you probably want to use a more predictable end-to-end workflow.</p><p>This series of articles will equip you with the knowledge to create, develop and deploy a Vue project with Docker. With some tweaks, you can also use the featured <code>Dockerfiles</code> to deploy any project, using other frameworks such as React or Svelte.</p><h2 id=\"introducing-docker\">Introducing Docker</h2><p>Docker is a tool to build and deploy containerized units of software. So next to the source code for the application, a Docker project will also bring the environment to run it. </p><p>In a nutshell, compared to the quick &amp; dirty approach I've described previously, there are several significant advantages, such as:</p><ul><li>Node.js is not required on the hosting machine, neither on your local device, for development, testing, or productive usage.</li><li>The installation of node modules and the building of the app can be done inside the container(s).</li><li>We can easily replace the static express folder with a 'real' server. In this case, we'll use <code>nginx</code> to serve the web app.</li><li>Sharing code and replicating errors in a team context is much easier. </li><li>Docker itself comes with some goodies, such as <a href=\"https://docs.docker.com/network/\">networks</a> and <a href=\"https://docs.docker.com/compose/reference/\">docker-compose</a>, making it easy to manage apps, APIs, and databases altogether.</li></ul><p>Docker is built around two core structures: Containers and Images. <br>To not confuse these two, keep the following in mind when reading ahead:</p><ol><li><strong>Images are blueprints for containers</strong>. They include the source code and the required runtime, like Python or Node.js</li><li><strong>Containers are living units of software.</strong> They are running based on an underlying image.</li></ol><p>If you would like to dig deeper into how Docker helps you with your development workflow, you can find some references at the end of this article.</p><h2 id=\"installing-docker\">Installing Docker</h2><p>For the scope of this article, we want to make use of all of Docker's capabilities. That means: <strong>You need to have no other tool installed but Docker itself</strong>. We'll use it to execute all further setup steps for the Vue development and build process.</p><h3 id=\"linux-ubuntu-quick-setup\">Linux (Ubuntu) quick setup</h3><p>Taken from <a href=\"https://docs.docker.com/engine/install/ubuntu/\">https://docs.docker.com/engine/install/ubuntu/</a></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># Remove previous versions of docker\nsudo apt-get remove docker docker-engine docker.io containerd runc\n\n# Update package list &amp; install necessary dependencies\nsudo apt-get update\nsudo apt-get install \\\n  apt-transport-https \\\n  ca-certificates \\\n  curl \\\n  gnupg \\\n  lsb-release\n\n# Add Docker's GPG key to your local mashine\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n# Install Docker\necho \\\n  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"windows-setup\">Windows setup</h3><p>As Windows does not support containerization out of the box, you will need Docker Desktop to keep following along. You can download it using the link below.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.docker.com/docker-for-windows/install/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Install Docker Desktop on Windows</div><div class=\"kg-bookmark-description\">How to install Docker Desktop for Windows</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.docker.com/favicons/docs@2x.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Docker Documentation</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://docs.docker.com/favicons/docs@2x.ico\" alt=\"\"></div></a></figure><h2 id=\"setting-up-the-project\">Setting up the project</h2><p>It is common for web frameworks to require some steps in between project initialization and deployment. To make sure this process can be replicated, Docker makes use of <code>Dockerfiles</code>, single files that describe steps to build an <code>Image</code>. </p><p>Naturally, you can use a local Node.js setup for development and containerize the app when it's ready for shipping. In this case, however, I'd like to leave the whole setup to Docker. So before we jump into development, let's start by setting an image that creates our project's structure and enables us to extend it.</p><h3 id=\"the-initial-project-structure\">The initial project structure</h3><p>Change into a directory of your choice and create the following folder structure: </p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">/\n| - /dockerfiles\n|   | - Setup.Dockerfile  # 1\n|   | - Dev.Dockerfile    # 2\n|   | - Deploy.Dockerfile # 3\n</code></pre>\n<!--kg-card-end: markdown--><p>To give you an idea of what these three <code>Dockerfiles</code> will help us achieve: </p><ol><li>This image is responsible to scaffold a basic project structure, as well as installing further npm packages.</li><li>We will use the second one to serve the project during development.</li><li>Image three is responsible for building and shipping the app once we're ready to do so. </li></ol><p>So much for the theory. Let's walk through these steps now, one by one.</p><h3 id=\"step-1-initialize-the-app\">Step 1: Initialize the app</h3><p>While it is common to use Docker for app development and deployment, in this case, we will also use it to set up our initial project structure. Like so, we can reduce the amount of software to be installed on our local machine and keep the setup process lean &amp; replicable. </p><p>We'll start by using the <a href=\"https://cli.vuejs.org/\">Vue CLI </a>to set up our app's structure. Since it depends on Node.js, we'll start <code>FROM</code> node:14 and add some additional command layers on top. </p><p>Into the <code>Setup.Dockerfile</code>, add the following content: </p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">FROM node:14\n\nWORKDIR /vue-setup\n\nRUN npm install -g @vue/cli\n\n# The following commands ensure access to our files\n# If we left them out, changing files on our local setup\n# would fail due to insufficient permissions. \nRUN userdel -r node\n\nARG USER_ID\n\nARG GROUP_ID\n\nRUN addgroup --gid $GROUP_ID user\n\nRUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID user\n\n# Set the active user and open the interactive terminal\nUSER user\n\nENTRYPOINT [ &quot;bash&quot; ]\n</code></pre>\n<!--kg-card-end: markdown--><p>We can then build our vue_helper image using the following command.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># Build an image named vue_helper using the Setup.Dockerfile\n# The build args manage permissions when executing commands from inside the container\ndocker build \\\n  --build-arg USER_ID=$(id -u) \\\n  --build-arg GROUP_ID=$(id -g) \\\n  -t vue_helper - &lt; ./dockerfiles/Setup.Dockerfile\n</code></pre>\n<!--kg-card-end: markdown--><p>Executing the next command will bind the container's working directory to our local machine, using a <a href=\"https://docs.docker.com/storage/bind-mounts/\">bind-mount</a>. </p><blockquote>Make sure the replace <code>/path/to/project/</code> with your own project path.</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">docker run -v /path/to/project/:/vue-setup -it vue_helper\n</code></pre>\n<!--kg-card-end: markdown--><p>Next, a terminal from inside the container will open. Here, we can now install the Vue app itself and add more npm modules, if necessary. </p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">user@b24a617a1dfa:/vue-setup$ vue create vue_app\n</code></pre>\n<!--kg-card-end: markdown--><p>You will then be prompted through the <a href=\"https://cli.vuejs.org/guide/creating-a-project.html\">standard Vue CLI setup</a>. In case you are unsure what to choose, just confirm all standard steps.</p><p>Given everything till this point went well, you will notice a new directory named <code>vue_app</code> appearing in your project folder. It origins from inside the container and means that everything went according to plan and our project is ready to be worked on.</p><p>Let's recapitulate what happened till this point:</p><ul><li>We've used Docker to create a new image named <code>vue_helper</code>.</li><li>It uses a bind-mount and an interactive session terminal to help us scaffold our Vue project.</li><li>By using <code>Vue create</code> inside the container with a dedicated user, we have a basic project boilerplate available on our local device - without ever installing anything on it.</li></ul><p>Check out the next articles where we will: </p><ul><li>Explore how to serve the containerized app during development.</li><li>Build an application image and have it run on our local machine.</li><li>Deploy the image to Dockerhub and serve it on a <a href=\"https://www.digitalocean.com/products/droplets/\">Digital Ocean Droplet</a></li></ul><h2 id=\"references\">References</h2><h3 id=\"docker-101-self-paced-tutorial\">Docker 101 - self-paced tutorial</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.docker.com/101-tutorial\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">#LearnDocker</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.docker.com/sites/default/files/d8/Docker-R-Logo-08-2018-Monochomatic-RGB_Moby-x1.png\" alt=\"\"><span class=\"kg-bookmark-author\">Docker</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.docker.com/sites/default/files/social/docker_facebook_share.png\" alt=\"\"></div></a></figure><h3 id=\"official-docker-documentation\">Official Docker documentation</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://docs.docker.com/get-started/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Orientation and setup</div><div class=\"kg-bookmark-description\">Get oriented on some basics of Docker and install Docker Desktop.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://docs.docker.com/favicons/docs@2x.ico\" alt=\"\"><span class=\"kg-bookmark-author\">Docker Documentation</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://docs.docker.com/favicons/docs@2x.ico\" alt=\"\"></div></a></figure><p></p><p></p>",
      "comment_id": "60e9e2604eacaf03c46bea75",
      "feature_image": null,
      "featured": true,
      "created_at": "2021-07-10T20:09:36.000+02:00",
      "updated_at": "2021-11-06T13:24:37.000+01:00",
      "published_at": "2021-08-13T10:00:00.000+02:00",
      "custom_excerpt": "Vue is a great framework to develop user interfaces. It has experienced a great deal of growth in popularity since its initial release in 2014 and still continues to improve. In this article, you'll learn how to make your Vue development workflow even better using Docker",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/how-to-develop-and-deploy-a-vue-js-app-with-docker-part-one/",
      "excerpt": "Vue is a great framework to develop user interfaces. It has experienced a great deal of growth in popularity since its initial release in 2014 and still continues to improve. In this article, you'll learn how to make your Vue development workflow even better using Docker",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60fb16582dcbe203bf992120",
      "uuid": "3cf7577f-8f5f-4983-9775-1fd45fd6c90e",
      "title": "A collection of useful express.js middleware concepts for your next project",
      "slug": "a-collection-of-useful-express-js-middleware-concepts-for-your-next-project",
      "html": "<p>Middleware is commonly used to enhance or extend the functionality of the main application. For the time the client-server communication takes place, it has access to both the <code>request</code> and the <code>response</code> object. And while there's already a lot of node modules that provide neat features, you might want to give your app a more customizable edge.</p><blockquote>Note that I will assume you have a basic understanding of how express and HTTP works. If you need a refresher, visit the MDN docs for an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">HTTP-Overview</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\">HTTP-Methods</a>. You can then use a tool like <a href=\"https://www.postman.com/downloads/\">Postman</a> to communicate with the respective express endpoints.</blockquote><p>If you prefer the TL: DR options, you can find the source code to this article on Github  </p><h2 id=\"the-project-setup\">The project setup</h2><p>Let's start by setting up a basic outline. </p><p>If you do not have it installed already, get yourself a copy of <a href=\"https://nodejs.org/en/\">Node.js</a>. <br>Then, change into a directory of your choice and set up the project structure below. Make sure to also install <code>express.js</code> as a dependency<code>.</code></p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># / \n# | - middleware\n# |   | - index.js\n# | - index.js\n# | - package.json\n\n# Quickly set it up with the following shell command: \nnpm init -y\nnpm i -D express\nmkdir middleware routes\ntouch routes/user.js index.js\n</code></pre>\n<!--kg-card-end: markdown--><p>Then, add the following code to the <code>index.js</code> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) =&gt; {\n  res.status(200).send(`&lt;h1&gt;Hello from ${req.hostname}&lt;/h1&gt;`)\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}!`)\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Launch the application by typing <code>node index.js</code> in your terminal. This will start a simple webserver to get started with.</p><h2 id=\"using-middleware-functions\">Using middleware functions</h2><p>Middleware can be put to use in two different ways: </p><ul><li>Application-wide with the pattern <code>app.use(middleware);</code></li><li>Route-specific with the pattern <code>app.use('/path', middleware);</code>, where <code>path</code> is the pattern of the route middleware should be applied to.</li></ul><p>It is also possible to replace <code>app</code> with <code>router</code> in a dedicated file, as well as replace <code>use</code> with HTTP methods such as <code>.get</code>. </p><p>Let's now end the skirmish and take a look into some appliances.</p><h2 id=\"1-write-access-and-error-logs\">1: Write access and error logs</h2><p>A simple but effective use case is to put in a central logger. To do so, create a new file in your project under <code>middleware/index.js</code> and add the following code: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">function accessLog(req, res, next) {\n  const { hostname, method, path, ip, protocol } = req;\n  console.log(`ACCESS: ${method} ${protocol}://${hostname}${path} - ${ip}`);\n  next();\n}\n\nfunction errorLog(err, req, res, next) {\n  const { hostname, method, path, protocol } = req;\n  console.log(`ERROR: ${method} ${protocol}://${hostname}${path} - ${err}`);\n  // next(); // you can call either next or send a uniform error response\n  res.status(500).send({ status: &quot;server-error&quot;, message: err.message });\n}\n\nmodule.exports = { accessLog, errorLog };\n</code></pre>\n<!--kg-card-end: markdown--><p>You can then import these two functions into your <code>index.js</code> file and put them to use. </p><blockquote>Be sure to place <code>errorLog</code> after all other routes.</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const express = require('express');\nconst app = express();\nconst port = 3000;\nconst { accessLog, errorLog } = require(&quot;./middleware/middleware&quot;);\n\napp.use(accessLog);\n\napp.get('/', (req, res) =&gt; {\n  res.status(200).send(`Hello from ${req.hostname}`);\n});\n\napp.use(errorLog);\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}!`);\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Now try and make a GET request to <code>http://localhost:3000</code>. You will note the access logger gets into action - and so will the error logger once something in your code goes sideways. You can test this by placing an obvious error into the <code>.send</code> - method.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">res.status(200).send(`Hello from ${foo}`);\n</code></pre>\n<!--kg-card-end: markdown--><p>Since <code>foo</code> is undefined, you will receive a respective error message on the clientside, as well as in the console.</p><h2 id=\"2-set-cors-and-cache-headers\">2. Set CORS and cache headers</h2><p>HTTP headers help clients interpret the response they receive back from the server. Express middleware has access to the response object, so we can use a dedicated function to get an edge on common problems such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a> or caching</p><p>Add the following to your <code>middleware/index.js</code>. The comments in the code will give you an idea of what the respective header controls.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">function setHeaders(req, res, next) {\n  // Allows resource sharing for clients that are hosted on\n  // Different domains. Useful for public APIs\n  res.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);\n\n  // Restrict http - methods to a chosen few. This applies only\n  // When the browser sends a Preflight request, e.g. when using\n  // window.fetch().\n  res.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, PUT, DELETE, OPTIONS&quot;);\n\n  // Add some basic cache control for requesting browsers\n  res.setHeader(&quot;Cache-Control&quot;, &quot;private, max-age=120&quot;);\n\n  // Use this header to cache files that do not change often,\n  // e.g. static HTML, CSS or Javascript for 5 days\n  // res.setHeader(&quot;Cache-Control&quot;, &quot;public, max-age=432000, immutable&quot;)\n\n  // If you want no cache at all, uncomment this header\n  // res.setHeader(&quot;Cache-Control&quot;: &quot;no-store, max-age=0&quot;)\n\n  // You can also remove standard headers. In case of express,\n  // the following will get rid of the X-Powered-By header\n  res.removeHeader('X-Powered-By');\n  next();\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>Instead of applying the middleware globally, I would like to only apply it to the root path. </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">app.get('/', setHeaders, (req, res) =&gt; {\n  res.status(200).send(`&lt;h1&gt;Hello from ${req.hostname}&lt;/h1&gt;`)\n})\n</code></pre>\n<!--kg-card-end: markdown--><p>Let's now try and point the browser to <code>localhost:3000</code>. If you take a look into your developer tools, you'll see the responses headers being adjusted correctly.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/07/Screenshot-from-2021-07-25-13-11-35.png\" class=\"kg-image\" alt=\"an image that shows the correct settings for CORS and cache-control http headers\" loading=\"lazy\" width=\"1847\" height=\"953\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/07/Screenshot-from-2021-07-25-13-11-35.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/07/Screenshot-from-2021-07-25-13-11-35.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/07/Screenshot-from-2021-07-25-13-11-35.png 1600w, https://blog.q-bit.me/content/images/2021/07/Screenshot-from-2021-07-25-13-11-35.png 1847w\" sizes=\"(min-width: 720px) 720px\"><figcaption>The CORS and cache headers were set correctly for this one path.</figcaption></figure><p>If you would like to learn more about response headers, you can find some good resources and further reading on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Response_header\">MDN</a>.</p><h2 id=\"3-route-guards\">3. Route guards</h2><p>If you are running a private API, you will want to have an authorization and authentication check in place. To set up one for our middleware use case, we'll first create a new, private route. Then, we'll protect it with a simple, standardized authorization check.</p><p>Add the following code right after the <code>/</code> - route:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">app.get('/private', (req, res) =&gt; {\n  res.status(200).send(`&lt;h1&gt;Welcome back, ${req.locals.username}&lt;/h1&gt;`)\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>To protect this newly created path, we'll use <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization#examples\">Basic Authorization</a>. It requires the client to send a base64 - encoded string that includes the username and the matching password, separated by a colon.</p><p>If you are using Postman to follow along, you can use the built-in <strong>Authorization</strong> tab to enter a username and a password. For custom client requests, the built of a Basic Auth header follows this pattern:</p><blockquote>Header key: authorization<br>Header value: 'Basic + base64(&lt;username&gt;:&lt;password&gt;)'</blockquote><p>To interpret it on the server-side, we must first destructure and decode the authorization header. Once the username and password are readable, they will need to be compared to a valid user-password combination in a database or, in this case, a hardcoded pair of strings.</p><blockquote>Note that you should <strong>never</strong> store cleartext passwords in a database. Instead, when creating an entry, use a library to <a href=\"https://auth0.com/blog/hashing-passwords-one-way-road-to-security/\">create password hashes</a>, such as <a href=\"https://www.npmjs.com/package/bcrypt\">bcrypt</a>, and only compare the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Digest\">digest values.</a> </blockquote><p>Add the following to your <code>middleware/index.js</code>:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">function validateUser(req, res, next) {\n  const auth = req.headers.authorization;\n\n  // If the client does not send auth - header, send a 401 response\n  if (!auth) {\n    return res.status(401).send({\n      status: 'not-authenticated',\n      message: 'The request does not contain a valid access header'\n    })\n  }\n\n  // res.locals is commonly used to store temporary request data\n  req.locals = { user: { name: null } };\n\n  // Extract the username and password from the authroization header\n  const baseValue = auth.replace('Basic ', '').trim();\n  const baseString = Buffer.from(baseValue, 'base64').toString('utf-8');\n  const [username, password] = baseString.split(':');\n\n  // Check if user is permitted to access this resource\n  if (username === 'user' &amp;&amp; password === 'supersecret123') {\n    req.locals.user.name = username;\n    // Call next only if user may access paths protected by this middleware\n    return next();\n  } else {\n    return res.status(403).send({\n      status: 'not-authorized',\n      message: 'You are not permitted to access this resource'\n    })\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>There are now three possible responses back to the client: </p><ol><li>No authorization header will result in the <code>401</code> message.</li><li>Sending the wrong credentials will result in the <code>403</code> message.</li><li>The correct credentials will allow the callback function of the route to be called.</li></ol><h2 id=\"further-reading-and-resources\">Further reading and resources</h2><p>If you would like to take a look at the finished code, you can find it on Github:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/tq-bit/article-express-middleware\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - tq-bit/article-express-middleware: A repository that holds some appliances for Express.js middleware.</div><div class=\"kg-bookmark-description\">A repository that holds some appliances for Express.js middleware. - GitHub - tq-bit/article-express-middleware: A repository that holds some appliances for Express.js middleware.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">tq-bit</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opengraph.githubassets.com/62d9a82a62cd3cd5d7b0115a93be7a3a5c019284395253a7d8b4337987f7f3af/tq-bit/article-express-middleware\"></div></a></figure><p>In the next part, I will provide some more middleware use cases. If you would like to read about a specific topic, please reach out and share your ideas. A few more use cases I could envision are: </p><ul><li>Orchestrate other API endpoints inside your app's middleware. E.g. automatic currency conversion with <a href=\"https://www.frankfurter.app/\">Frankfurter</a> when receiving a user's input.</li><li>Resize big images or lowering their quality before saving them to a database</li><li>Notify connected clients whenever a specific route is called. </li></ul>",
      "comment_id": "60fb16582dcbe203bf992120",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-07-23T21:19:52.000+02:00",
      "updated_at": "2021-08-06T10:00:00.000+02:00",
      "published_at": "2021-08-06T10:00:00.000+02:00",
      "custom_excerpt": "This article explains a few techniques that make use of express's middleware interface. You will learn how to set up a common logger, add CORS and cache HTTP headers, as well as implement simple Basic Authentication into your Node application.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/a-collection-of-useful-express-js-middleware-concepts-for-your-next-project/",
      "excerpt": "This article explains a few techniques that make use of express's middleware interface. You will learn how to set up a common logger, add CORS and cache HTTP headers, as well as implement simple Basic Authentication into your Node application.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "610175e69f73d7077d69b3e5",
      "uuid": "28ab04a5-5ce0-4b81-879f-106e203dbff9",
      "title": "Seven advanced techniques for Javascript spread syntax and rest parameters",
      "slug": "ten-simple-techniques-for-javascript-spread-and-rest",
      "html": "<p>The three dots <code>...</code> that represent both of these concepts were introduced with ECMAScript2015. They literally \"spread\" an array or an object into its elements, which provides you with a great variety of options while coding. For example:</p><ul><li>Destructuring single or multiple elements.</li><li>Concat multiple elements into one.</li><li>Cherry-pick variables you need and sort out those you don't.</li></ul><p>I have collected seven common use cases from my latest projects that make use of this flexible approach. Each is as simple as it is powerful.</p><h2 id=\"1-get-rid-of-unwanted-object-properties\">1) Get rid of unwanted object properties</h2><p>The idea is simple:</p><ul><li>Assume you have a Javascript object out of which you need all props but one. </li><li>You also need the original object at a later point.</li></ul><p>You could of course use the <code>delete</code> operator and keep a copy of the original object. Using spread syntax, however, keeps your code more readable. </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const domeOfCologne = {\n  buildStart: 1248,\n  buildHalted: 1560,\n  buildFinished: 1880,\n  buildingCity: 'Cologne',\n  buildingCountry: 'Germany'\n}\n\n// Remove the location\nconst { buildingCountry, ...domeInfo } = domeOfCologne; \n\nconsole.log(buildingCountry) // output: 'Germany'\nconsole.log(domeInfo)        // output: {buildStart: 1248, /* ... */}\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"2-join-elements-of-several-arrays-together\">2) Join elements of several arrays together</h2><p>A quite common use case is to join elements from distinct arrays. It is as easy as spreading the old arrays and adding them into a new one. Further below, you can also find a more complex method that considers nested arrays as well.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const americanNames = ['Dave', 'Joe', 'John']; \nconst germanNames = ['Hans', 'Mertens', 'Astrid'];\nconst englishNames = ['James', 'Peter', 'Boris']; \n\nconst allNames = [...americanNames, ...germanNames, ...englishNames];\nconsole.log(allNames) // Logs an array including all elements from above\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"3-add-optional-function-arguments\">3) Add optional function arguments</h2><p>Rest parameters in a function's declaration make it easy to define optional arguments. The following function will take in one mandatory argument. It will then apply a function based on its value, using the other arguments passed into the function.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">function math(calcMeth, ...numbers) {\n  numbers.forEach(num =&gt; {\n    if (isNaN(num)) {\n      throw new TypeError('One or more arguments are not numeric')\n    }\n  });\n  switch (calcMeth) {\n    case 'sum':\n      return numbers.reduce((prev, curr) =&gt; prev + curr, 0);\n    case 'multi':\n      return numbers.reduce((prev, curr) =&gt; prev * curr, 1);\n    case 'power': \n        return numbers.reduce((prev, curr) =&gt; prev ** curr);\n    default: \n      throw new Error(`${calcMeth} is not a valid calculation method`)\n  }\n}\n\nconsole.log(math('sum', 2, 3))   // 5\nconsole.log(math('multi', 2, 3)) // 6\nconsole.log(math('power', 2, 3)) // 8\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"4-extend-an-object-with-additional-properties\">4) Extend an object with additional properties</h2><p>This technique comes in especially handy when using standard configuration and dynamically extend it. A case in which I've used it myself was with a REST API endpoint that always delivers a standard HTTP - message. I would use the spread operator to additionally add a custom response from the database the frontend dev could then process  </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const standardResponse = {\n  status: 400,\n  title: 'client-error', \n  message: 'This item is already maintained in the database'\n}\n\nconst extendedResponse = {\n  ...standardResponse, \n  itemId: '123'\n}\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"5-copy-an-array-or-an-object\">5) Copy an array or an object</h2><p>If you want to keep the original state of an item, copying it is a save option. Like this, you have it available for further processing. This might also come in especially handy in reactive contexts, as the copy will be non-reactive. </p><blockquote>Note that the new object also has no more reference to the original</blockquote><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const original = {\n  name: 'Mona Lisa', \n  creator: 'Leonardo Da Vinci'\n}\n\nconst copy = { ...original }; \n\nconsole.log(copy) // {name: 'Mona Lisa', creator: 'Leonardo Da Vinci'}\nconsole.log(copy === original) // false\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"6-remove-duplicated-objects-from-an-array\">6) Remove duplicated objects from an array</h2><p>This is a more complex one, but it makes perfect use of the spread operator. </p><ul><li><code>array.map</code> will pull out the values</li><li><code>new Map</code> will make sure that only unique objects are kept</li><li><code>...</code> will iterate over the map and create the array</li></ul><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const pictures = [\n  {\n    name: 'Mona Lisa',\n    painter: 'Leonardo Da Vinci',\n  },\n  {\n    name: 'The Scream',\n    painter: 'Edvard Munch',\n  },\n  {\n    name: 'Starry Night',\n    painter: 'Vincent van Gogh'\n  },\n  {\n    name: 'The Scream',\n    painter: 'Edvard Munch',\n  }, {\n    name: 'Mona Lisa',\n    painter: 'Leonardo Da Vinci',\n  },\n];\n\nfunction removeDuplicates(arr) {\n  return [...new Map(arr.map((item) =&gt; [item.name, item])).values()];\n}\n\nconsole.log(removeDuplicates(pictures)); // Logs the three unique paintings\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"7-flatten-nested-arrays\">7) Flatten nested arrays</h2><p>Nested arrays are nasty. And without libraries such as <strong>lodash, </strong>you often end up with unnecessarily spaghettified code. What if there was an easier way?</p><p>The following function will recursively iterate through an array. It pulls out all elements nested within and joins them in a new array.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const churchesOfMadrid = [\n  [\n    'Templo de Debod',\n    'Iglesia Parroquial de San Jerónimo el Real',\n    [\n      'San Antonio de los Alemanes',\n      'Convento de las Trinitarias Descalzas de San Ildefonso',\n      [\n        'Basílica de San Francisco el Grande',\n        'Basílica Pontificia de San Miguel'\n      ],\n    ],\n  ]\n]\n\nfunction flattenArray(array) {\n  const newArray = [];\n  const length = array.length\n  for (let index = 0; index &lt; length; index++) {\n    if (Array.isArray(array[index])) {\n      newArray.push(...flattenArray(array[index]))\n    } else {\n      newArray.push(array[index])\n    }\n  }\n  return newArray\n}\n\nconst newArray = flattenArray(churchesOfMadrid);\nconsole.log(newArray) // Returns the flattened array item\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"references\">References</h2><h3 id=\"spreadand-rest-syntax-on-mdn\">Spread - and Rest Syntax on MDN</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Spread syntax (...) - JavaScript | MDN</div><div class=\"kg-bookmark-description\">Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object…</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://developer.mozilla.org/favicon-48x48.97046865.png\" alt=\"\"><span class=\"kg-bookmark-author\">MDN</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://developer.mozilla.org/mdn-social-share.0ca9dbda.png\" alt=\"\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Rest parameters - JavaScript | MDN</div><div class=\"kg-bookmark-description\">The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://developer.mozilla.org/favicon-48x48.97046865.png\" alt=\"\"><span class=\"kg-bookmark-author\">MDN</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://developer.mozilla.org/mdn-social-share.0ca9dbda.png\" alt=\"\"></div></a></figure>",
      "comment_id": "610175e69f73d7077d69b3e5",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-07-28T17:21:10.000+02:00",
      "updated_at": "2021-08-01T18:33:18.000+02:00",
      "published_at": "2021-07-29T08:19:00.000+02:00",
      "custom_excerpt": "Spread syntax and rest parameters are two sides of the same coin. While the first gives you access to all properties of an object or array, the latter 'compresses' several variables or arguments into a single array. Read on to learn how to make the best use of this syntactic gemstone collection",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/ten-simple-techniques-for-javascript-spread-and-rest/",
      "excerpt": "Spread syntax and rest parameters are two sides of the same coin. While the first gives you access to all properties of an object or array, the latter 'compresses' several variables or arguments into a single array. Read on to learn how to make the best use of this syntactic gemstone collection",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60d6202d909db40385fc9fd0",
      "uuid": "f33c4658-3a96-4a0a-b6da-e2f17584c7d7",
      "title": "🌙 How to implement darkmode with a Vue.js component",
      "slug": "dark-mode-toggle-component-with-vue-js",
      "html": "<p>Implementing dark mode in your web app will be sugar for your night owl readers. It implements a high-contrast color scheme that's soothing for the eyes when one's background light is dimmed or even absent. Toggling between dark - and light mode is a must-have for modern websites. So read on to learn how to write your own reusable Vue.js component to implement it.</p><h2 id=\"the-tl-dr-code-sandbox\">The TL: DR - Code Sandbox</h2><p>If you're after the component's source, check out this code sandbox. </p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://codesandbox.io/s/immutable-monad-cotsz?file&#x3D;/src/App.vue\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">immutable-monad-cotsz - CodeSandbox</div><div class=\"kg-bookmark-description\">immutable-monad-cotsz by tq-bit using @vue/cli-plugin-babel, vue</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://codesandbox.io/favicon.ico\"><span class=\"kg-bookmark-author\">CodeSandbox</span><span class=\"kg-bookmark-publisher\">tq-bit</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://codesandbox.io/api/v1/sandboxes/cotsz/screenshot.png\"></div></a></figure><p>Make sure to consider these two core points: </p><ul><li>From <code>App.vue</code>, copy the <code>:root</code> and <code>:root.dark-theme</code> styles and add them to your own project's structure. </li><li>Then, copy the whole content of <code>ThemeButton.vue</code> into your own component file</li></ul><p>You can then import and use <code>&lt;theme-button /&gt;</code> component wherever you would like to use it.</p><h2 id=\"getting-started-prerequisites\">Getting started &amp; prerequisites</h2><p>To follow along on your local machine, you will require a working version of <a href=\"https://nodejs.org/en/\">Node.js</a> and your favorite text editor, such as Visual Studio Code. While not mandatory, some experience with Vue or another Javascript framework will come in handy. </p><h3 id=\"create-the-app\">Create the app</h3><p>This project will use <a href=\"https://vitejs.dev/\">Vite.js</a> for bootstrapping. It's a toolkit comparable to the <a href=\"https://cli.vuejs.org/\">Vue CLI</a>. Change to a directory of your choice and execute the following commands.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\"># Generate a vite-based app in the current directory\nnpm init @vitejs/app .\n\n# Give the package a name, then install the necessary node modules\nnpm install &amp;&amp; npm run dev\n</code></pre>\n<!--kg-card-end: markdown--><p>This will create a fairly lean app structure based on <a href=\"https://www.npmjs.com/package/@vitejs/create-app\">@vitejs/create-app</a> - perfect for our use case. </p><blockquote>For the sake of simplicity, the following steps will all happen inside the <strong>App.js</strong> file. <br>I would encourage you to try and use a separate component though.</blockquote><h3 id=\"create-the-base-component-structure\">Create the base component structure</h3><p>Now that the app is set up, let's start with some basic component structures. </p><p>Replace all contents of the  <code>App.vue</code> file with the following:</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;template&gt;\n  &lt;div class=&quot;container-center&quot;&gt;\n    &lt;div class=&quot;card&quot;&gt;\n      &lt;input\n        @change=&quot;toggleTheme&quot;\n        id=&quot;checkbox&quot;\n        type=&quot;checkbox&quot;\n        class=&quot;switch-checkbox&quot;\n      /&gt;\n      &lt;label for=&quot;checkbox&quot; class=&quot;switch-label&quot;&gt;\n        &lt;span&gt;🌙&lt;/span&gt;\n        &lt;span&gt;☀️&lt;/span&gt;\n        &lt;div\n          class=&quot;switch-toggle&quot;\n          :class=&quot;{ 'switch-toggle-checked': userTheme === 'dark-theme' }&quot;\n        &gt;&lt;/div&gt;\n      &lt;/label&gt;\n      &lt;p&gt;Wer sitzt dort so spät, bei Nacht und Wind?&lt;/p&gt;\n      &lt;p&gt;Entwickler Clemens, mit einem Pint.&lt;/p&gt;\n      &lt;p&gt;Man hört ihn seufzen, ziemlich hart -&lt;/p&gt;\n      &lt;p&gt;Sonntag ist's, die Deadline naht&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<pre><code class=\"language-javascript\">&lt;script&gt;\nexport default {\n  mounted() {\n    const initUserTheme = this.getMediaPreference();\n    this.setTheme(initUserTheme);\n  },\n\n  data() {\n    return {\n      userTheme: &quot;light-theme&quot;,\n    };\n  },\n};\n&lt;/script&gt;\n</code></pre>\n<pre><code class=\"language-css\">&lt;style&gt;\nhtml, body {\n  padding: 0;\n  margin: 0;\n}\n/* Define styles for the default root window element */\n:root {\n  --background-color-primary: #ebebeb;\n  --background-color-secondary: #fafafa;\n  --accent-color: #cacaca;\n  --text-primary-color: #222;\n  --element-size: 4rem;\n}\n\n/* Define styles for the root window with dark - mode preference */\n:root.dark-theme {\n  --background-color-primary: #1e1e1e;\n  --background-color-secondary: #2d2d30;\n  --accent-color: #3f3f3f;\n  --text-primary-color: #ddd;\n}\n\np {\n  color: var(--text-primary-color);\n}\n\n.container-center {\n  background-color: var(--background-color-primary);\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.card {\n  padding: 2rem 4rem;\n  height: 200px;\n  width: 300px;\n  text-align: center;\n  border: 1px solid var(--accent-color);\n  border-radius: 4px;\n  background-color: var(--background-color-secondary);\n}\n&lt;/style&gt;\n\n</code></pre>\n<!--kg-card-end: markdown--><p>Then start your vite dev - server using <code>npm run dev</code>. You should see this when opening your browser:</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/06/01_Vue_Theme_Button_Start-1.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"582\" height=\"420\"></figure><p></p><h2 id=\"style-the-checkbox-to-look-like-a-switch\">Style the checkbox to look like a switch</h2><h3 id=\"style-the-checkbox-element\">Style the checkbox element</h3><p>Since there is no browser-native switch element, we'll create our own. The easiest way to do so is by making use of the connection between an input element and the label that describes it.</p><p> To do so, we have to make sure that the <code>for</code> attribute in the <code>label</code> tag points at the correct input element's <code>id</code>. In this case, both of them are named <strong>checkboxes. </strong>Doing so will cause a click event that hits the label to be reflected by the checkbox.</p><blockquote>That means: We can get rid of the checkbox and focus on styling the label.</blockquote><p>Let's start by adding the following to the style - part of the <code>App.vue</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">.switch-checkbox {\n  display: none;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><h3 id=\"style-the-checkbox-label\">Style the checkbox label</h3><p>Next, let's look at the background. The switch is meant to be a component, so we have to make sure it's easily reusable and flexible for other applications. For that, let's take a step back and look into the <code>:root</code> CSS we've parsed before. </p><p>In case you're unfamiliar with this approach: Inside the root scope, you can define globally valid CSS variables. These can be used all across the app and offer great potential for reusability. If you're curious, read more about it on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:root\">MDN</a></p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">:root {\n  --background-color-primary: #ebebeb;\n  --background-color-secondary: #fafafa;\n  --accent-color: #cacaca;\n  --text-primary-color: #222;\n  --element-size: 4rem; /* &lt;- this is the base size of our element */\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>To give us a bit of flexibility regarding the switch's size, we'll make use of the <code>--element-size</code> CSS variable and use the <code>calc()</code> function to compute all other dimensions based on it. Since the width of the label is its biggest measurement, we'll bind its value to our root's variable.</p><blockquote>In a nutshell: We'll use one css variable to describe the scale of the switch</blockquote><p>With that in mind, add the following to the style - part of the <code>App.vue</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">.switch-label {\n  /* for width, use the standard element-size */\n  width: var(--element-size); \n  \n  /* for other dimensions, calculate values based on it */\n  border-radius: var(--element-size);\n  border: calc(var(--element-size) * 0.025) solid var(--accent-color);\n  padding: calc(var(--element-size) * 0.1);\n  font-size: calc(var(--element-size) * 0.3);\n  height: calc(var(--element-size) * 0.35);\n  \n  align-items: center;\n  background: var(--text-primary-color);\n  cursor: pointer;\n  display: flex;\n  position: relative;\n  transition: background 0.5s ease;\n  justify-content: space-between;\n  z-index: 1;\n} \n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>If you open your browser now, you'll note that one core element is still missing: The actual toggle ball. Let's add it next.</p><h3 id=\"style-the-switch-s-toggle\">Style the switch's toggle</h3><p>To finalize the switch, add the following to the style - part of the <code>App.vue</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">.switch-toggle {\n  position: absolute;\n  background-color: var(--background-color-primary);\n  border-radius: 50%;\n  top: calc(var(--element-size) * 0.07);\n  left: calc(var(--element-size) * 0.07);\n  height: calc(var(--element-size) * 0.4);\n  width: calc(var(--element-size) * 0.4);\n  transform: translateX(0);\n  transition: transform 0.3s ease, background-color 0.5s ease;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Now, almost finished, actually. The toggle looks done, but clicking on it won't result in the usual toggle - effect. To overcome this, we'll use a Vue.js feature - dynamic class binding.</p><p>We already have one data property available in our component we can use for that purpose:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// In the script - part of App.vue \ndata() {\n  return {\n    userTheme: &quot;light-theme&quot;,\n  };\n},\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>As you can see in the HTML - template, we're already dynamically binding a class based on <code>userTheme</code>. </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">&lt;!-- In the template part of App.vue --&gt;\n&lt;label for=&quot;checkbox&quot; class=&quot;switch-label&quot;&gt;\n  &lt;span&gt;🌙&lt;/span&gt;\n  &lt;span&gt;☀️&lt;/span&gt;\n  &lt;div\n    class=&quot;switch-toggle&quot;\n    :class=&quot;{ 'switch-toggle-checked': userTheme === 'dark-theme' }&quot;\n  &gt;&lt;/div&gt;\n&lt;/label&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>So let's add this class's definition in our style - part:</p><!--kg-card-begin: markdown--><pre><code class=\"language-css\">.switch-toggle-checked {\n  transform: translateX(calc(var(--element-size) * 0.6)) !important;\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>That wraps up the styling of the switch. Finally, let's add the functionality to handle light - and dark mode.</p><h2 id=\"implement-the-dark-mode-switch\">Implement the dark-mode switch</h2><p>All left to do is to dynamically add and remove the <code>.dark-mode</code> and <code>.light-mode</code> class to our window root element. Based on that, one of the two root-variable scopes will be enforced.  To round things up, we'll also use localStorage to add some persistence.</p><h3 id=\"manually-toggle-between-the-themes\">Manually toggle between the themes</h3><p>Start by adding the following method to the script part of the <code>App.vue</code> file:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">methods: {\n  setTheme(theme) {\n    localStorage.setItem(&quot;user-theme&quot;, theme);\n    this.userTheme = theme;\n    document.documentElement.className = theme;\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><p>Next, we will need to consider what happens when the user clicks on the switch. We want to read out the local storage value for the user theme and, based on it, execute the <code>setTheme</code> method form above. Let's add the next method straight away: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">toggleTheme() {\n  const activeTheme = localStorage.getItem(&quot;user-theme&quot;);\n  if (activeTheme === &quot;light-theme&quot;) {\n    this.setTheme(&quot;dark-theme&quot;);\n  } else {\n    this.setTheme(&quot;light-theme&quot;);\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p></p><h3 id=\"recognize-user-preferences\">Recognize user preferences</h3><p>The final step is to initially set a user theme based on the user's browser settings. To do so, we'll make use of the <code>(prefers-color-scheme: dark)</code> CSS selector. It is available to Javascript's <code>window.matchMedia()</code> method and returns true if our user's browser prefers dark themes, or false if not.</p><p>Let's add this code piece to the <code>App.vue</code> file's methods section. It will be called by the already available <code>mounted()</code> method when the app loads.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">getMediaPreference() {\n  const hasDarkPreference = window.matchMedia(\n    &quot;(prefers-color-scheme: dark)&quot;\n  ).matches;\n  if (hasDarkPreference) {\n    return &quot;dark-theme&quot;;\n  } else {\n    return &quot;light-theme&quot;;\n  }\n},\n</code></pre>\n<!--kg-card-end: markdown--><p>And that's it. You'll now be looking at a fully functional theme switch, ready to be thrown into any new or existing project. Try and give it a shot, maybe play around with the element sizes and <code>calc()</code> a bit to find the fitting size for your appliance.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/06/Screenshot-from-2021-06-25-23-13-28.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"591\" height=\"420\"></figure><h2 id=\"further-reading\">Further reading</h2><p>While fairly simple to customize, there's some learning to be done to correctly implement a fully-fledged dark theme for your website. Check out the following links to learn more on the topic and find some useful resources</p><h3 id=\"material-design-and-dark-colors\">Material design and dark colors</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.material.io/design/color/dark-theme.html\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Material Design</div><div class=\"kg-bookmark-description\">Build beautiful, usable products faster. Material Design is an adaptable system—backed by open-source code—that helps teams build high quality digital experiences.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.material.io/static/assets/favicon.ico\"><span class=\"kg-bookmark-author\">Material Design</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://material.io/static/assets/result.png\"></div></a></figure><h3 id=\"a-color-palette-finder-for-your-next-dark-theme\">A color palette finder for your next dark theme</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.color-hex.com/color-palettes/?keyword&#x3D;dark\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Color Palettes dark</div><div class=\"kg-bookmark-description\">Over 0 color palettes listed created by color hex users, discover the new color palettes and the color scheme variations.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.color-hex.com/favicon.ico\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://www.color-hex.com/logo@2x.png\"></div></a></figure><h2 id=\"a-web-app-to-create-a-dark-css-theme-for-your-website\">A web app to create a dark CSS theme for your website</h2><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://nighteye.app/dark-css-generator/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Dark CSS theme generator | Night Eye</div><div class=\"kg-bookmark-description\"></div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://nighteye.app/wp-content/uploads/2018/05/cropped-logo-512x512-192x192.png\"><span class=\"kg-bookmark-author\">Night Eye</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://nighteye.app/wp-content/uploads/2018/06/MediumSocialBanner.jpg\"></div></a></figure>",
      "comment_id": "60d6202d909db40385fc9fd0",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-06-25T20:27:57.000+02:00",
      "updated_at": "2021-08-01T20:16:28.000+02:00",
      "published_at": "2021-06-27T14:01:00.000+02:00",
      "custom_excerpt": "A dark mode feature can be a bliss for your webapp's users. It reduces stress on the eye in low-light conditions and can also help saving energy on the device. In this post, you'll learn how to write your own Vue.js component to add it to any newly created - or already existing project with ease.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/dark-mode-toggle-component-with-vue-js/",
      "excerpt": "A dark mode feature can be a bliss for your webapp's users. It reduces stress on the eye in low-light conditions and can also help saving energy on the device. In this post, you'll learn how to write your own Vue.js component to add it to any newly created - or already existing project with ease.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "60b51c4d909db40385fc9c9f",
      "uuid": "ccf0524c-89e1-4d7c-a493-e3cf525a9dab",
      "title": "Use async / await with Javascript's .map() and other high-order functions",
      "slug": "use-async-await-with-high-order-functions",
      "html": "<p>TL: DR - Asynchronous, high order array functions return an array of promises. To resolve each of these, you can use one of the following methods: </p><ul><li><code>Promise.all([ /* ... array of promises ... */ ])</code><br>Wait for all promises to be resolved. Throws errors</li><li><code>Promise.allSettled([/* ... array or promises ...*/ ])</code><br>Wait for all promises to be resolved or rejected. Requires manual error handling</li></ul><p>A variable assignation using <code>.map()</code> then looks something like this: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const promiseArray = iterableArray.map(async (element) =&gt; {\n  // ... async code \n  return result;  \n});\n\nconst dataArray = Promise.all(promiseArray);\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"a-simple-use-case\">A simple use case</h2><p>While high-order functions have lots of perks, I recently noticed they were not natively capable of handling promises' syntactic sugar very well. </p><p>I noticed this problem when developing on serverside Node.js code, which was meant to accept an array of files from an incoming client as form data and save it to a database. Instead of returning the response, I'd expect, namely an array with values, the below function returned me an array of <code>Promises</code>:</p><ul><li>First, the npm <a href=\"https://www.npmjs.com/package/formidable\">Formidable</a> library would handle form parsing and give me a <code>files</code> - object. It would be available only inside the callback's scope.</li><li>Inside <code>files</code>, the first property would indicate the file - array: <br><code>const filePropertyName = Object.keys(files)[0]</code> </li><li>Having identified these two, I could now iterate through the array of files. </li><li>For each file, I would then prepare a payload and call an SQL - stored procedure to asynchronously write this file into the database, using <a href=\"https://www.npmjs.com/package/mssql\">mssql</a>. </li><li>Each successfully performed stored procedure would return me a field that uniquely identifies each uploaded file. I would store it in <code>fileIds</code> (see code below) and then send the array back to the client.</li></ul><p>So far so good, right? Everything that comes after cannot be much harder. Here's the code: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Iterate through the array of files identified by its form property\n// ('name' of the client's form field)\nconst fileIds = files[filePropertyName].map(async (file /* object */) =&gt; {\n\n  // Use a private function to create a payload for stored procedure\n  // (In order to work, it required some intel from other formfields)\n  const payload = this._handleSetUploadPayload(fields,file);\n  \n  // Create a new FileModel \n  const File = new FileModel(storedProcedureName);\n  \n  // Use its uploadFile method to trigger the stored procedure\n  return await File.uploadFile(payload);\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Well, not so fast. After sending three files down the API, what was contained in <code>fileIds</code> was not exactly what I've been looking for. When I started to debug, I saw the following result:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">[Promise {&lt;pending&gt;}, Promise {&lt;pending&gt;}, Promise{&lt;pending&gt;}]\n</code></pre>\n<!--kg-card-end: markdown--><p>I was puzzled for a moment. And frustrated. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#polyfill\">So I started searching MDN and found an explanation</a> (step 9: <code>return A</code>). </p><h2 id=\"the-solution\">The solution</h2><p>In my own words, that'll be: </p><blockquote>The <code>.map()</code> algorithm applies an async callback to each element of an array, creating promises as it does. However, the returned result  by <code>.map()</code> is no promise, but an <strong>array of promises. </strong></blockquote><p>That was an answer I could live with. So I changed the code accordingly, primarily by adding <code>Promise.all()</code> and - voila, it started to work: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const fileIdsPromises = files[filePropertyName].map(async (file) =&gt; {\n  const payload = this._handleSetUploadPayload(fields,file);\n  const File = new FileModel(storedProcedureName);\n\n  const fileId = await File.uploadFile(payload);\n  return fileId\n});\n\nconst fileIds = await Promise.all(fileIdsPromises);\n</code></pre>\n<!--kg-card-end: markdown-->",
      "comment_id": "60b51c4d909db40385fc9c9f",
      "feature_image": null,
      "featured": true,
      "created_at": "2021-05-31T19:26:37.000+02:00",
      "updated_at": "2021-07-27T19:37:22.000+02:00",
      "published_at": "2021-05-31T21:32:48.000+02:00",
      "custom_excerpt": "High order functions in Javascript are incredibly useful to improve code readability and to reduce redundancies. They have a weak point, however: Asynchrony. Read on to learn how to tackle this matter.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/use-async-await-with-high-order-functions/",
      "excerpt": "High order functions in Javascript are incredibly useful to improve code readability and to reduce redundancies. They have a weak point, however: Asynchrony. Read on to learn how to tackle this matter.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "6086ff79909db40385fc9467",
      "uuid": "a1a79684-e7d0-4946-873e-4d9af631ded1",
      "title": "Five  conductive - and five innovative npm packages",
      "slug": "ten-npm-packages-to-refine-your-everyday-work",
      "html": "<p>You probably know those npm package mentioned in every other article, such as <code>express</code>, <code>axios</code> and <code>nodemon</code> . Each of them provides great ease of usage through their docs and offers a great developer experience. But so do others. The collection I'd like to share with you includes five useful packages for everyday development that just work, as well as five innovative ones that show a lot of promise and enhance your application with modern features.</p><h2 id=\"1-conductive-and-reliable\">1) Conductive and reliable</h2><h3 id=\"1-1-formidable-a-form-data-parser\">1.1) Formidable - a form-data parser</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/formidable\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">formidable</div><div class=\"kg-bookmark-description\">A node.js module for parsing form data, especially file uploads.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>Node.js backends don't come with builtin form - or body parsers. If you'd like to implement a feature such as file uploading, you're either bound to write that code yourself or use a library that does the heavy lifting for you. And while <a href=\"https://www.npmjs.com/package/multer\">multer</a> provides a similar functionality at a smaller size, formidable, not being a middleware, can be used more dynamically in bigger backend applications.</p><h3 id=\"1-2-knex-an-sql-query-builder\">1.2) Knex - an SQL query builder</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/knex\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">knex</div><div class=\"kg-bookmark-description\">A batteries-included SQL query &amp; schema builder for Postgres, MySQL and SQLite3 and the Browser</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>Writing SQL queries in Javascript can be puzzling, especially if you're used to document-oriented databases most of the time. Knex won't save you the effort to understand SQL syntax, but it will surely make your life easier by composing a query string out of several chained Javascript methods. It's  The package has a solid documentation, is easy to pick up and compatible with all major Node SQL drivers. </p><p>Consider this sample code to get an idea of how it works:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const customer_id = 101;\n\nknex('customers')\n  .where({ customer_id: id })\n  .select('customer_name')\n\n// -&gt; Resolves to \n// SELECT customer_name FROM customers WHERE customer_id = 101;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"1-3-sharp-a-performant-image-converter\">1.3) Sharp - a performant image converter</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/sharp\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">sharp</div><div class=\"kg-bookmark-description\">High performance Node.js image processing, the fastest module to resize JPEG, PNG, WebP, AVIF and TIFF images</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>Sharp uses libvips under the hood, an image library written in C that embraces async processing. If you have ever looked for a package that does image conversion in a nice and accurate manner, this package might be right for you. </p><p>A simple use case would be to put it before a module that handles an image database and automatically create several image sizes. Or just make sure your user's avatar remains at a reasonable size, in case they upload a 4k*4k behemoth. </p><h3 id=\"1-4-puppeteer-a-headless-chromium-browser\">1.4) Puppeteer - a headless Chromium browser</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/puppeteer\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">puppeteer</div><div class=\"kg-bookmark-description\">A high-level API to control headless Chrome over the DevTools Protocol</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>The package's function in a nutshell: </p><blockquote>Most things that you can do manually in the browser can be done using Puppeteer!</blockquote><p>It can be used only for automated form submission or taking screenshots, and just as well for automated tasks. If you're looking for an all-in-one solution, you might be after Puppeteer. It aids you with:</p><ul><li>Automated form submission, to simulate end-to-end data transfer (or to cheat on your mobile office time report)</li><li>Taking screenshots from an article you enjoyed and would like to savekeep</li><li>Web scraping, if you're a data scientist or work in a data driven team*, </li><li>Performance tests, if you're after a good lighthouse score. </li></ul><p>* Be sure to not cross legal borders. <a href=\"https://www.tutorialspoint.com/python_web_scraping/legality_of_python_web_scraping.htm\">Read on here</a> to learn about scraping the www</p><h3 id=\"1-5-gsap-a-powerful-animation-toolkit\">1.5) GSAP - a powerful animation toolkit</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/gsap\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">gsap</div><div class=\"kg-bookmark-description\">GSAP is a robust JavaScript toolset that turns developers into animation superheroes. Build high-performance animations that work in **every** major browser. Animate CSS, SVG, canvas, React, Vue, WebGL, colors, strings, motion paths, generic objects...any</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>I stumbled across this gem while studying to improve my Vue.js frontend skills. As somebody who's generally having a hard time to properly design UIs, I was flabbergasted what difference a few lines of GSAP powered code can do. It's performant and well documented. What really won me over is their <a href=\"https://greensock.com/cheatsheet/\">cheatsheet</a> and its backlinks though. </p><p>Note that you might have to <a href=\"https://greensock.com/standard-license/\">buy a license</a> to use this package for subscription based products</p><h2 id=\"2-innovative-and-shiny\">2) Innovative and shiny</h2><h3 id=\"2-1-bent-a-next-gen-http-client\">2.1) Bent - a next-gen http - client</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/bent\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">bent</div><div class=\"kg-bookmark-description\">Functional HTTP client for Node.js w/ async/await.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>NPM's <code><a href=\"https://www.npmjs.com/package/request\">request</a></code> and <code><a href=\"https://www.npmjs.com/package/axios\">axios</a></code> are still the most common and mature top-dog clients, but new challengers are emerging - one of which is the bent package. It consists out of less than 15% of the above packages' size, and embraces modern Javascript practices. As it's fully asynchronous, it only works in an async context.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">(async function () {\n  const bent = require(&quot;bent&quot;)\n  const getJson = bent('json')\n  const res = await getJson('https://jsonplaceholder.typicode.com/todos')\n  console.log(res)\n})()\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"2-2-tessaract-js-an-optical-character-recognition-library\">2.2) Tessaract.js - an Optical Character Recognition Library</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/tesseract.js\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">tesseract.js</div><div class=\"kg-bookmark-description\">Pure Javascript Multilingual OCR</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>While <a href=\"https://en.wikipedia.org/wiki/Optical_character_recognition\">OCR</a> is not the big deal it was a few years ago, the fact that it can be done from inside your browser still looks rather futuristic. If you're worried about synchronous code execution: The main library spawns a worker for each recognition process, making use of the non-blocking event loop magic. Possible appliances could be: </p><ul><li>Fulltext search for one or more uploaded document files.</li><li>Text extraction for natural language processing.</li><li>A combination with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices\">navigator.mediaDevices</a> - &amp; a device's camera to extract words straight from notes on paper. </li></ul><h3 id=\"2-3-storybook-a-platform-for-your-project-components\">2.3) Storybook - a platform for your project components</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://storybook.js.org/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Storybook: UI component explorer for frontend developers</div><div class=\"kg-bookmark-description\">Storybook is an open source tool for developing UI components in isolation for React, Vue, and Angular. It makes building stunning UIs organized and efficient.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://storybook.js.org/icons/icon-512x512.png\"><span class=\"kg-bookmark-author\">Storybook</span><span class=\"kg-bookmark-publisher\">Brad FrostAuthor of Atomic Design</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://storybook.js.org/images/social/open-graph.png\"></div></a></figure><p>If you're a React frontend engineer, it's likely you've at least heard of Storybook. It's less of a single npm package, but more of a tool to develop components in an isolated environment and thereby make them reusable. The <a href=\"https://brave.github.io/brave-ui/?path=/story/components--button\">Brave Browser Storybook</a> illustrates the usefulness of this tool very well</p><h3 id=\"2-4-prisma-a-toolkit-for-rapid-orm-database-development\">2.4) Prisma - a toolkit for rapid ORM database development</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/prisma\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">prisma</div><div class=\"kg-bookmark-description\">Prisma is an open-source database toolkit. It includes a JavaScript/TypeScript ORM for Node.js, migrations and a modern GUI to view and edit the data in your database. You can use Prisma in new projects or add it to an existing one.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>If you've seen Knex in the upper section and thought: No way I'll give up my NoSQL or GraphQL way or writing queries - this module means good news. Prisma uses its own <code>.prisma</code> filetype to declare its schemata. The way these can be used to query data looks a lot like the MongoDB's <a href=\"https://www.npmjs.com/package/mongoose\">Mongoose</a>. While being relatively big in size, it offers a bunch of useful interfaces and tools for fast prototyping, migration and development.</p><h3 id=\"2-5-gramjs-a-telegram-client-for-you-and-your-bots\">2.5) GramJS - a telegram client for you and your bots</h3><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.npmjs.com/package/telegram\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">telegram</div><div class=\"kg-bookmark-description\">NodeJS MTProto API Telegram client library,</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://static.npmjs.com/1996fcfdf7ca81ea795f67f093d7f449.png\"><span class=\"kg-bookmark-author\">npm</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png\"></div></a></figure><p>Like OCR, chatbots are far away from being futuristic features restricted to a few tech geeks. Quite the opposite - messaging services such as telegram embrace them and even expose whole interfaces for you to work with. This library is not required to do so, but using it requires less boilerplace than writing all API methods from scratch.</p><p>The use cases here also are endless. One which I've liked was <a href=\"https://dev.to/rgthree/how-i-got-a-nintendo-switch-using-nodejs-2eab\">How I got a Nintendo Switch using NodeJS</a>, where the author automatically got notified when the price of the console dropped on amazon.</p><h2 id=\"what-else\">What else?</h2><p>There's plenty of other gems out there (like I stumbled across <a href=\"https://www.npmjs.com/package/node-vibrant\">Vibrant</a> the other day). And while you should be picky with what your projects depend on, including rather new and innovative packages could end up being that feature to peak out from the mass. </p>",
      "comment_id": "6086ff79909db40385fc9467",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-04-26T19:59:21.000+02:00",
      "updated_at": "2021-06-13T21:07:11.000+02:00",
      "published_at": "2021-05-15T14:21:08.000+02:00",
      "custom_excerpt": "The Node Package Manager (NPM), offers a variety of open source modules to extend your digital products. This article aims to present you a mixture of good - old utility modules, as well as some libraries which have rather exotic use cases.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/ten-npm-packages-to-refine-your-everyday-work/",
      "excerpt": "The Node Package Manager (NPM), offers a variety of open source modules to extend your digital products. This article aims to present you a mixture of good - old utility modules, as well as some libraries which have rather exotic use cases.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": null,
      "frontmatter": null
    },
    {
      "id": "604372c18bcca203882c5bcc",
      "uuid": "04bec027-1e4d-443a-af1c-5dc6675fc464",
      "title": "How to use service workers in javascript",
      "slug": "an-introduction-to-the-javascript-service-worker-api",
      "html": "<h2 id=\"technological-purposes-and-limitations\">Technological purposes and limitations</h2><p>Being a proxy between content on the internet and the user's client, service workers are addressing the issue of making browser-specific content available even when one's device is offline. Once registered, they are used for a variety of features, some of which are:</p><ul><li>Client-side caching of static files and remote data</li><li>Serverside push - messages, e.g. with Node.js and <a href=\"https://www.npmjs.com/package/web-push\">web-push</a></li><li>(Periodic) background data synchronisation</li></ul><p>Take <a href=\"https://devdocs.io/\">devdocs.io</a>. The site offers its full content within a Progressive Webapp (PWA) that will even be available if your computer or mobile phone is off the net, given you have installed it when visiting the website</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/03/01_devdocs_progressive_webapp.jpg\" class=\"kg-image\" alt loading=\"lazy\" width=\"1051\" height=\"48\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/03/01_devdocs_progressive_webapp.jpg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/03/01_devdocs_progressive_webapp.jpg 1000w, https://blog.q-bit.me/content/images/2021/03/01_devdocs_progressive_webapp.jpg 1051w\" sizes=\"(min-width: 720px) 720px\"><figcaption>When clicking on the + - sign, the PWA will be installed and grants you offline-access to devdocs.io</figcaption></figure><p>You should not mistake PWAs with desktop or native applications built with <a href=\"https://www.electronjs.org/\">Electron.js</a> or <a href=\"https://nativescript.org/\">Nativescript</a> though - they do only run on the browser's context and have no access to device specific APIs.</p><p>But even without using the full toolkit, service workers give you a high level of control over what gets cached, improving app speed and lowering server-side pressure. As of 2021, they are also <a href=\"https://jakearchibald.github.io/isserviceworkerready/\">supported in all major browsers</a>, making them well considerable for production - ready apps.</p><h2 id=\"service-worker-constraints\">Service worker constraints</h2><p>When developing webapps using them, you have to consider that service workers</p><ul><li>can only be used in a https - context for security reasons (note that for  development localhost is also considered a secure domain) </li><li>run on a separate browser thread, therefor have no direct DOM - access.</li><li>run completely asynchronous and rely a lot on promises. In case you need a refresh, I've got an article on <a href=\"https://blog.q-bit.me/what-is-the-difference-between-callback-promises-and-async-await/#promise\">promise basics here</a>.</li></ul><h2 id=\"project-setup\">Project setup</h2><p>You can of course follow freestyle, but I recommend you use the boilerplate from my Github repository - it includes placeholders for the functions that are introduced in this article, as well as some helper functions to create new elements on the DOM. If you just want to jump into the source code,<a href=\"https://github.com/tq-bit/service-worker-basic-demo/tree/done\"> there's also a 'done' branch</a>.</p><figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://github.com/tq-bit/service-worker-basic-demo\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">tq-bit/service-worker-basic-demo</div><div class=\"kg-bookmark-description\">Contribute to tq-bit/service-worker-basic-demo development by creating an account on GitHub.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">tq-bit</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://avatars.githubusercontent.com/u/69204418?s&#x3D;400&amp;v&#x3D;4\"></div></a><figcaption>https://github.com/tq-bit/service-worker-basic-demo/tree/main</figcaption></figure><p>The initial user interface looks like this: </p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/03/01_ServiceWorker_Demo_UserInterface-1.jpg\" class=\"kg-image\" alt=\"an image that shows the initial application index.html file's content\" loading=\"lazy\" width=\"1920\" height=\"1100\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/03/01_ServiceWorker_Demo_UserInterface-1.jpg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/03/01_ServiceWorker_Demo_UserInterface-1.jpg 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/03/01_ServiceWorker_Demo_UserInterface-1.jpg 1600w, https://blog.q-bit.me/content/images/2021/03/01_ServiceWorker_Demo_UserInterface-1.jpg 1920w\"></figure><p>The <code>main.js</code> - and the <code>serviceworker.js</code> file also include a bit of boilerplate, like logging and to create / query DOM elements.</p><h2 id=\"registration-process-scope-and-state-illustration\">Registration process, scope and state: Illustration</h2><p>The following graphic from MDN perfectly sums up a service worker lifecycle. In the coming section, I'll use some code snippets below to illustrate how to hook up events to each of them.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/03/sw-lifecycle.png\" class=\"kg-image\" alt=\"an image from the mozilla development network docs that visualized the service worker lifecycle\" loading=\"lazy\" width=\"579\" height=\"867\"><figcaption><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Service worker Lifecycle</a> by <a href=\"https://developer.mozilla.org/en-US/docs/MDN/About/contributors.txt\">Mozilla Contributors</a> is licensed under <a href=\"https://creativecommons.org/licenses/by-sa/2.5/\" rel=\" noopener\">CC-BY-SA 2.5</a>.</figcaption></figure><h2 id=\"registration-process-scope-and-state-working-code-examples\">Registration process, scope and state: <br>Working code examples</h2><p>Before you move ahead, let's take a moment and describe what we'd like to do next.</p><p>We will</p><ol><li>register a service worker script inside our application</li><li>unregister the worker again and add a function to monitor if a worker is currently active in the user interface</li><li>take a look at basic service worker features, such as initial file - as well as http-request caching  </li></ol><blockquote>Note that for each snippet below, there is a corresponding TODO - comment inside each file that serves as a placeholder. If you somehow get lost, try and use the <a href=\"https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\">Todo Tree</a> VSCode plugin for quick navigation.</blockquote><h3 id=\"1-register-the-service-worker-\">1: Register the service worker.</h3><p>Before doing anything else, a service worker has to be downloaded and registered on the client-side. Imagine it as just another JS - file you would place inside the body of your <code>index.html</code>, just that it runs separated from the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Main_thread\">main thread</a>. Like this, the lifecycle illustrated above will start and we have access to the Service-Worker's API.</p><blockquote>Heads up: Many other articles also cover a few lines of code to check if service workers are supported by the browser. I've left this out on purpose, <a href=\"https://caniuse.com/?search=service%20worker\">as most of the modern browsers</a> have a built-in support as of today.</blockquote><p>Add the following to your <code>main.js</code> file</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add the registerWorker function here\nconst registerWorker = async () =&gt; {\n try {\n  // Define the serviceworker and an optional options object.\n  const worker = navigator.serviceWorker;\n  const options = { scope: './' };\n  \n  // Register the worker and save the registeration in a variable. \n  const swRegisteration = await worker.register('serviceworker.js', options);\n  \n  // We will make use of this event later on to display if a worker is registered\n  window.dispatchEvent(new Event('sw-toggle'));\n  \n  // Return the registeration object to the calling function\n  return swRegisteration;\n } catch (e) {\n  console.error(e);\n }\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Once you click the button <code>Register Worker</code> in your browser, the service worker is downloaded from the location you've given in the <code>worker.register</code> - method. It then proceeds to run through the lifecycle methods and, once that is done, remains idle until receiving an event-nudge from the main Javascript thread.</p><p>To confirm everything worked, check your browser's development tools under <code>Application &gt; Service Workers</code> - as we can see, the registration process was successful and your worker is ready for action.</p><blockquote>Heads up: While you're here, make sure to toggle the <code>Update on reload</code> checkbox - it makes sure that no data remains unintentionally cached.</blockquote><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/03/02_ServiceWorker_Demo_UserInterface_DevTools-1.jpeg\" class=\"kg-image\" alt=\"an image that demonstrates how to register a worker and set the 'update on reload' option inside the development tools\" loading=\"lazy\" width=\"1920\" height=\"1100\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/03/02_ServiceWorker_Demo_UserInterface_DevTools-1.jpeg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/03/02_ServiceWorker_Demo_UserInterface_DevTools-1.jpeg 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/03/02_ServiceWorker_Demo_UserInterface_DevTools-1.jpeg 1600w, https://blog.q-bit.me/content/images/2021/03/02_ServiceWorker_Demo_UserInterface_DevTools-1.jpeg 1920w\"></figure><h3 id=\"2-unregistering-and-monitoring\">2: Unregistering and monitoring</h3><p>Now while one might just take the above code as given and use it as-is, I was curious to understand what exactly was going on with this registration object that is returned by the <code>worker.register</code> - method.</p><p>Turns out that, once downloaded and activated, a service worker registration is created inside the <code>navigator.serviceWorker</code> container and can be read out like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const swRegisteration = await worker.getRegistration();\n</code></pre>\n<!--kg-card-end: markdown--><p>This means: If there are no active instances, the above variable declaration will resolve into <code>undefined</code>, which comes in handy and allows us to show possible registrations in our user interface.</p><p>Add the following to your <code>main.js</code> file: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add the unregisterWorker function here\nconst unregisterWorker = async () =&gt; {\n try {\n  // Define the serviceworker\n  const worker = navigator.serviceWorker;\n  \n  // Try to get a sw-registration\n  const swRegisteration = await worker.getRegistration();\n  \n  // If there is one, call its unregister function\n  if (swRegisteration) {\n   swRegisteration.unregister();\n   window.dispatchEvent(new Event('sw-toggle'));\n   \n   // If there's none, give a hint in the console\n  } else {\n   console.info('No active workers found');\n  }\n } catch (e) {\n  console.error(e);\n }\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>To round things up, add the following to your <code>main.js</code> file for user feedback:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add checkWorkerActive function here\nconst checkWorkerActive = async () =&gt; {\n // Get registration object \n const swRegisteration = await navigator.serviceWorker.getRegistration();\n \n // Query for the indicator DOM element and remove its classes\n const indicator = dqs('#worker-indicator');\n indicator.classList.remove('bg-danger', 'bg-success');\n \n // Change its content according to whether there's a registered worker or not\n if (swRegisteration &amp;&amp; swRegisteration !== undefined) {\n  indicator.innerText = 'You have an active service worker';\n  indicator.classList.add('bg-success');\n } else {\n  indicator.innerText = 'Service worker is not active';\n  indicator.classList.add('bg-danger');\n }\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Finally, hook the method up to the <code>sw-toggle</code> event that is fired when registering and unregistering happens (therefor the <code>window.dispatchEvent</code>):</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add the sw-toggle - event listener here\nwindow.addEventListener('sw-toggle', () =&gt; {\n  checkWorkerActive();\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>Back to your app, the image below now shows an active service worker instance.</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/03/03_ServiceWorker_Demo_Active.jpeg\" class=\"kg-image\" alt=\"an image that shows the result of registering a service worker in the development tools\" loading=\"lazy\" width=\"1920\" height=\"1100\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/03/03_ServiceWorker_Demo_Active.jpeg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/03/03_ServiceWorker_Demo_Active.jpeg 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/03/03_ServiceWorker_Demo_Active.jpeg 1600w, https://blog.q-bit.me/content/images/2021/03/03_ServiceWorker_Demo_Active.jpeg 1920w\"></figure><p>Once you click on <code>Unregister</code>, you can also monitor the change in your devtools</p><figure class=\"kg-card kg-image-card kg-width-full\"><img src=\"https://blog.q-bit.me/content/images/2021/03/03_ServiceWorker_Demo_InActive.jpeg\" class=\"kg-image\" alt=\"an image that shows the result of unregistering a service worker in the development tools\" loading=\"lazy\" width=\"1920\" height=\"1100\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/03/03_ServiceWorker_Demo_InActive.jpeg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/03/03_ServiceWorker_Demo_InActive.jpeg 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/03/03_ServiceWorker_Demo_InActive.jpeg 1600w, https://blog.q-bit.me/content/images/2021/03/03_ServiceWorker_Demo_InActive.jpeg 1920w\"></figure><blockquote>In case of manual registration / un-registration via the button, you might have to refresh your browser once to activate the service worker. In a productive scenario, this step should be taken by the website's / app's lifecycle methods</blockquote><p>That wraps up how to handle registration and also what we want to do within our <code>main.js</code> file. Let's now take a look inside the <code>serviceworker.js</code> file.</p><h2 id=\"3-caching-and-offline-availability\">3. Caching and offline-availability</h2><p>Two basic functionalities of a service worker are making static files available for offline usage, as well as caching requests from a remote server. A core benefit to be taken away here is an improvement in user experience due to faster - or offline - page loading. To wrap this article up, let's find out how it works.</p><blockquote>Note that, since a service worker will only work over https or from the localhost, you will need a development server to serve your files. If you're using VSCode, try the <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">Live Server</a> extension.</blockquote><h3 id=\"3-1-service-worker-global-this-\">3.1 Service worker global 'this'</h3><p>The global <code>this</code> behaves a bit differently inside a service worker - compared to the <code>main.js</code> - file. In a nutshell: </p><ul><li><code>this</code> describes the object that owns the function calling it (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">read more about the topic in general on MDN</a>).</li><li>In the context of a service worker, it is represented by the <code>ServiceWorkerGlobalScope</code> - object</li></ul><p>Inside the service worker file, the same provides us functions and properties such as <code>self</code> or <code>caches</code>. These we can utilize to enforce the service worker magic.</p><h3 id=\"3-2-caching-strategies\">3.2 Caching strategies</h3><p>Since the global service worker scope might compete with the version of your webapp, you have to make sure old caches get cleaned up properly before a new instance of your project is deployed. One method to do the same is to define an app version as well as a whitelist, based on which a new instance, before getting to work, can do some cleanup tasks (remember the visualization above? This happens in the <code>active</code> - phase). These two variables are already available in the <code>serviceworker.js</code> file, we'll use them in the upcoming snippets.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// appWhitelist indicates of which versions caches are meant to be kept\n// If there is a gamebreaking change in static files or data delivery, \n// you should consider depracating old apps by removing their ids from here.\nconst appWhitelist = ['app_v1', 'app_v2', 'app_v3'];\n\n// appActive indicates the currently active cache, or more specific the name\n// of the cache used by the application. This variable should be synchronized\n// with appWhitelist and fit the latest app version. \nconst appActive = 'app_v1';\n\n// appFiles holds the path to files that should be cached for offline usage \nconst appFiles = ['./index.html', './main.css', './main.js'];\n</code></pre>\n<!--kg-card-end: markdown--><p>In case you do not want to handle these strategies yourself, there are a few handy javascript libraries that can help you out, such as <a href=\"https://www.npmjs.com/package/workbox-sw\">workbox-sw</a>.</p><h3 id=\"3-3-caching-static-files\">3.3 Caching static files</h3><p>Having said and considered the above points, caching static files is as easy as adding the following snippets to your <code>serviceworker.js</code> file</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add cacheAppFiles function here\nconst cacheAppFiles = async (appActive, appFiles) =&gt; {\n\n  // Wait for the active cache version to open and add all files to it\n  const cacheActive = await caches.open(appActive);\n  cacheActive.addAll(appFiles);\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>While we are at it, let's also add a function to get rid of old caches. Like this, we can make sure that only the current relevant cache is active and no old files will get in the way and cause inconsistencies.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const deleteOldCache = async (appWhitelist) =&gt; {\n\n  // The caches.key property contains an array of cache names. In our case, \n  // their names would be app_v1, app_v2, etc. Each of them contains the \n  // associated cached files and data.\n  const keys = await caches.keys();\n  \n  // In case the cache is not whitelisted, let's get rid of it\n  keys.forEach((version) =&gt; {\n    if (!appWhitelist.includes(version)) {\n      caches.delete(version);\n    }\n  });\n};\n</code></pre>\n<!--kg-card-end: markdown--><p>Then, once a new service worker is installing, call this function. the <code>event.waitUntil</code> - method makes sure the above function resolves before moving ahead in the code. After installation, the files will then be cached and ready for offline usage.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">self.addEventListener('install', (event) =&gt; {\n  // Add the application files to the service worker cache\n  event.waitUntil([cacheAppFiles(appActive, appFiles)]);\n}); \n\nself.addEventListener('activate', (event) =&gt; {\n  // Remove all old caches from the service worker\n  event.waitUntil([deleteOldCache(appWhitelist)]);\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>And that's about it - the defined files are now available within the service worker's cache.</p><h3 id=\"3-4-accessing-cached-content\">3.4 Accessing cached content</h3><p>The above makes sure our caching strategy is being enforced, but does not yet give us access to the files or data being stored. To gain access, our service worker has to listen to outgoing http-requests and then - based on our caching strategy - either return a cached response or fetch the data from the remote location.</p><p>Let us first add the necessary event listener. Add the following to your <code>serviceworker.js</code> - file </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">self.addEventListener('fetch', (event) =&gt; {\n  // When receiving a fetch - request, intercept and respond accordingly\n  event.respondWith(cacheRequest(appActive, event.request));\n});\n</code></pre>\n<!--kg-card-end: markdown--><p>As you see, <code>cacheRequest</code> takes in two arguments - the active version of the cache, as well as the outgoing request from the client to the server. It is meant to return a response that can be resolved as if there was no middleman involved. Therefor, before we write the code, let us first define what exactly is meant to happen.</p><ol><li>Check <strong>all active service worker caches</strong> (not just the currently active one, but all!) for an already cached response. </li><li>If it exists, return it - no network communication happens and the http-request resolves. If it does not exist, move ahead.</li><li>Check if the user is online (via <code>navigator.onLine</code> property)</li><li>If user is online, execute the fetch-request. When it resolves, clone the raw response and put it into the <strong>currently active service worker cache </strong>(not all, just the currently active one!). Also, returns response to the calling function</li><li>If user is offline and no cached content is available, log an error to the console.</li></ol><p>At this point, I'd like to state that a carefully chosen caching-strategy in step 3.1 is key to properly handle these interceptions. </p><blockquote>In the described case, a static file's version that has been cached in app_v1 will still be fetched in app_v2 if the app_v1 still remains in the <code>appWhitelist</code> array. This will cause problems if the initial file is outdated.</blockquote><p>Now, to wrap caching up, add the following to your <code>serviceworker.js</code> - file</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">const cacheRequest = async (appActive, request) =&gt; {\n  const online = navigator.onLine;\n  \n  // 1. Check if a cached response matches the outgoing request\n  const cachedResponse = await caches.match(request);\n  \n  // 2. If response has been cached before, return it\n  if (cachedResponse) {\n    return cachedResponse;\n\n    // 3. Check if user is online\n  } else if (online) {\n    \n    // 4. If response is not in cache, get it from network and store in cache\n    const response = await fetch(request);\n    const resClone = response.clone();\n    const cache = await caches.open(appActive);\n    cache.put(request, resClone);\n\n    // Return the response to the client\n    return response;\n  } else {\n  \n    // 5. If none of the above worked, log an error\n    console.error('No cached data and no network connection recognized');\n  }\n};\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"3-5-final-result-and-outlook-to-other-features\">3.5 Final result and outlook to other features</h3><p>It was a tough ride, but we've finally arrived at the point we can put everything together. What we can do now is: </p><ul><li>Cache static files and remote server responses</li><li>Access not only one, but several caches at once</li><li>Integrate a simple caching strategy that keeps our caches lean and clean</li></ul><p>Don't take my word for it though - try it out yourself. Below, I'll link you the final Github branch so even if you didn't follow every single step, you can get your hands dirty and try an offline-first approach. If you'd just like to take a glimpse into the functionality of this article's proof of concept, I've also added some screenshots for that under <strong>4. Working samples</strong>.</p><figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://github.com/tq-bit/service-worker-basic-demo/tree/done\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">tq-bit/service-worker-basic-demo</div><div class=\"kg-bookmark-description\">Contribute to tq-bit/service-worker-basic-demo development by creating an account on GitHub.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">tq-bit</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://avatars.githubusercontent.com/u/69204418?s&#x3D;400&amp;v&#x3D;4\"></div></a><figcaption>https://github.com/tq-bit/service-worker-basic-demo/tree/done</figcaption></figure><p>So what are you waiting for? Clone down that repos and start coding. </p><!--kg-card-begin: html--><hr/><!--kg-card-end: html--><h2 id=\"4-working-samples\">4. Working samples</h2><h3 id=\"4-1-lifecycle-and-exercising-caching-strategies\">4.1 Lifecycle and exercising caching strategies</h3><p>Assume you just deployed your service worker app or release a new app (and therefor a new cache) - version, your service worker will do the necessary setup during installation:</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_new_versionjpg-2.png\" class=\"kg-image\" alt=\"an image that shows how a service worker is being registered. it also shows console logs, visualizing how functions are being called while the service worker is installed and activated\" loading=\"lazy\" width=\"1920\" height=\"936\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/04/04_active_service_worker_new_versionjpg-2.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/04/04_active_service_worker_new_versionjpg-2.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/04/04_active_service_worker_new_versionjpg-2.png 1600w, https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_new_versionjpg-2.png 1920w\"><figcaption>A new service worker will always clean up old versions that are not whitelisted and make sure the static files are available before the first fetch request. Note how it conveniently caches the bootstrap css I'm using for the styling.</figcaption></figure><h3 id=\"4-2-service-worker-at-work-online\">4.2 Service worker at work - online</h3><p>Once registered, try and fetch the test data once. You'll notice they get cached and retrieved in case a subsequent request matches a cached response. While the static files were available right away, the dynamic data from jsonplaceholder were not. After they have been saved once, however, and the <code>appVersion</code> remains part of the <code>appWhitelist</code>, the service worker will deliver the data from the cache instead of getting it from the remote server.</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_online.jpg\" class=\"kg-image\" alt=\"the image shows how a website with a service worker retrieves content while the client is online\" loading=\"lazy\" width=\"1920\" height=\"941\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/04/04_active_service_worker_online.jpg 600w, https://blog.q-bit.me/content/images/size/w1000/2021/04/04_active_service_worker_online.jpg 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/04/04_active_service_worker_online.jpg 1600w, https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_online.jpg 1920w\"><figcaption>Static content is available straight away, as it's been registered while installing the service worker. Remote data have to be fetched once on demand.</figcaption></figure><h3 id=\"4-3-service-worker-at-work-offline\">4.3 Service worker at work - offline</h3><p>The same thing now also works offline. Try to tick the 'Offline' checkbox in your devtools and hit 'Fetch test data'</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_offline.png\" class=\"kg-image\" alt=\"the image shows how a website with a service worker retrieves content even when the client is offline\" loading=\"lazy\" width=\"1920\" height=\"936\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/04/04_active_service_worker_offline.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/04/04_active_service_worker_offline.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/04/04_active_service_worker_offline.png 1600w, https://blog.q-bit.me/content/images/2021/04/04_active_service_worker_offline.png 1920w\"><figcaption>The content is now always delivered from the cache.</figcaption></figure>",
      "comment_id": "604372c18bcca203882c5bcc",
      "feature_image": null,
      "featured": false,
      "created_at": "2021-03-06T13:17:05.000+01:00",
      "updated_at": "2021-07-25T20:37:08.000+02:00",
      "published_at": "2021-04-15T10:00:00.000+02:00",
      "custom_excerpt": "Progressive Webapps use service workers to make websites and webapps feel more like the native apps users know and love on their phones. This article will give you an introduction into the topic with some simple - to - follow code examples. ",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/an-introduction-to-the-javascript-service-worker-api/",
      "excerpt": "Progressive Webapps use service workers to make websites and webapps feel more like the native apps users know and love on their phones. This article will give you an introduction into the topic with some simple - to - follow code examples. ",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": "Progressive Webapps use service workers to make websites and webapps feel more like the native apps users know and love on their phones.",
      "frontmatter": null
    },
    {
      "id": "6069c404b6454d03943e67dd",
      "uuid": "12f6aa83-2414-4a22-8266-6e5f8663f9c0",
      "title": "How to create svg elements with Javascript",
      "slug": "how-to-create-svg-elements-with-javascript",
      "html": "<p><a href=\"#code\">TL: DR - take me to the code</a></p><h2 id=\"in-a-nutshell-what-are-svgs\">In a nutshell: What are SVGs?</h2><p>If you've ever taken a small image and tried to scale it up in size, you know the struggle: It gets pixelated and the fonts become an unreadable raster of black-to-whiteish squares. Fortunately, there are resolutions to the matter, one of which has been standardized within the <code>.svg</code> file format. While other common formats, such as <br><code>.png</code>, are based on a grid of pixels, SVG consists out of a fixed set of shapes. The way these are drawn and aligned is described with <a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\">XML - markup</a>, more specifically with <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/path\">paths</a>. This allows for more dynamic scaling.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/Bitmap_VS_SVG.svg\" class=\"kg-image\" alt=\"this image shows a comparison between the letter S being rendered with a raster format and the letter S being rendered with as an SVG\" loading=\"lazy\"><figcaption><a href=\"https://commons.wikimedia.org/wiki/File:Bitmap_VS_SVG.svg\">Yug, modifications by 3247</a>, <a href=\"https://creativecommons.org/licenses/by-sa/2.5\">CC BY-SA 2.5</a>, via Wikimedia Commons</figcaption></figure><p>In a nutshell, raw SVG files in the wilderness:</p><ul><li>are namespaced within their XML namespace (xmlns) - standard.</li><li>contain one or several paths within the &lt;svg /&gt; - tags that make up the actual graphic.</li><li>can be styled with CSS and inline styles.</li></ul><p>Consider this example from <a href=\"https://heroicons.com/\"><em>Heroicons</em></a><em>. </em>If you drop the markup into an HTML file, it will render into the actual icon.</p><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; class=&quot;h-6 w-6&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke=&quot;currentColor&quot;&gt;\n  &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1&quot; /&gt;\n&lt;/svg&gt;\n</code></pre>\n<!--kg-card-end: markdown--><p>Now that you've got a glimpse of the format, you might already have an idea how the post's topic is to be solved - using DOM - manipulation. So let's try and recreate the element above with Javascript.</p><h2 id=\"dynamic-xml-node-creation-boilerplate\">Dynamic XML-node creation - boilerplate</h2><p>XML differs from HTML in several aspects, the most relevant being that XML does not have predefined tags. Instead, it allows you to define these yourself within so-called namespaces. </p><p>This also allows for dynamically adding SVG icons to data from a remote location you'd like to bind to a client's interface while - or after - the data is being rendered. Let's assume you run a blog and would like to dynamically add the 'link'-icon from above before every post's heading. For a user's convenience, we'll add an anchor tag that permits the reader to scroll this post directly scroll it into their center of attention. To illustrate this example, let's start with the following boilerplate: </p><ul><li>We use a simple <code>index.html</code> file that holds a list of posts.</li><li>These posts are fetched from jsonplaceholder and dynamically added to the DOM by a function inside the <code>main.js</code> file.</li><li><code>main.css</code> provides us a few basic styles for our list.</li></ul><p>So launch your favorite text editor and add them to a free directory of your choice.</p><h3 id=\"index-html\"><em>index.html</em></h3><!--kg-card-begin: markdown--><pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;\n  &lt;title&gt;Create SVGs with Javascript - Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 class=&quot;site-header&quot;&gt;\n    Posts from today\n  &lt;/h1&gt;\n  &lt;main id=&quot;posts&quot; class=&quot;post-list&quot;&gt;&lt;/main&gt;\n  &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"main-js\"><em>main.js</em></h3><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">async function getPostData() {\n  const url = 'https://jsonplaceholder.typicode.com/posts';\n  const response = await fetch(url);\n  return await response.json();\n}\n\nfunction renderPosts(app, posts) {\n  const postNodes = posts.map((post) =&gt; {\n    // Create the DOM elements\n    const postCard = document.createElement('div');\n    const postHeader = document.createElement('div');\n    const postTitleAnchor = document.createElement('a');\n    const postTitle = document.createElement('h2');\n    const postText = document.createElement('p');\n\n    // Add some classes and attributes\n    postCard.classList.add('post-card');\n    postHeader.classList.add('post-header');\n    postTitle.classList.add('post-title')\n    postTitle.id = post.title;\n    postTitleAnchor.href = '#' + post.title;\n\n    // Place the text content\n    postTitle.textContent = post.title;\n    postText.textContent = post.body;\n\n    // TODO: Add the icon here\n\n    // Put together the DOM nodes\n    postHeader.appendChild(postTitleAnchor)\n    postHeader.appendChild(postTitle);\n    postCard.appendChild(postHeader);\n    postCard.appendChild(postText);\n    app.appendChild(postCard);\n\n    return postCard;\n  });\n  return postNodes;\n}\n\nasync function mountPosts() {\n  const app = document.querySelector('#posts');\n  const posts = await getPostData();\n  renderPosts(app, posts);\n}\n\nmountPosts();\n</code></pre>\n<!--kg-card-end: markdown--><h3 id=\"main-css\"><em>main.css</em></h3><!--kg-card-begin: markdown--><pre><code class=\"language-css\">* {\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n  background-color: blueviolet;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  padding: 2rem 0;\n  margin: 0;\n}\n\n.site-header {\n  position: sticky;\n  text-align: center;\n  width: 100%;\n  background-color: #fff;\n}\n\n.post-list {\n  padding: 0 20vw;\n}\n\n.post-card {\n  border-radius: 2rem;\n  background-color: #fff;\n  padding: 1rem 2rem;\n  margin: 2rem;\n}\n\n.post-icon {\n  transition: 0.25s all;\n  border-radius: 0.25rem;\n  height: 2rem;\n  width: 2rem;\n  margin-right: 0.5rem;\n  padding: 0.25rem;\n}\n\n.post-icon:hover {\n  transition: 0.5s all;\n  background-color: blueviolet;\n  stroke: white;\n}\n\n.post-header {\n  display: flex;\n  align-items: center;\n}\n\n@media only screen and (max-width: 1200px) {\n  .post-list {\n    padding: 0 10vw;\n  }\n}\n\n@media only screen and (max-width: 600px) {\n  .post-list {\n    padding: 0 2vw;\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown--><p>You'll receive a UI that looks like this, a simple and clean post collection.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/04/svg-start-screenshot.png\" class=\"kg-image\" alt=\"this image shows a screenshot of a few posts that have been fetched from jsonplaceholder\" loading=\"lazy\" width=\"1918\" height=\"986\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/04/svg-start-screenshot.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/04/svg-start-screenshot.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/04/svg-start-screenshot.png 1600w, https://blog.q-bit.me/content/images/2021/04/svg-start-screenshot.png 1918w\" sizes=\"(min-width: 720px) 720px\"></figure><!--kg-card-begin: html--><hr id=\"code\"/>\n<h2>Add a function to create the XML</h2><!--kg-card-end: html--><p>Let's take a look at the XML file again: </p><pre><code class=\"language-html\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"&gt;\n  &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1\" /&gt;\n&lt;/svg&gt;\n</code></pre><ul><li>It has a &lt;svg /&gt; tag as a wrapper which includes the namespace and some attributes.</li><li>Within, there are one (or several) &lt;path /&gt; tags that describe the shape of the SVG.</li><li>Inside the browser's context, both of these are interpreted and rendered like HTML tags.</li></ul><p>The last point also implies that said XML tags can be created and composed like HTML elements. An &lt;svg /&gt; tag, for instance, can be created like this: </p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// Create an element within the svg - namespace (NS)\ndocument.createElementNS('http://www.w3.org/2000/svg', 'svg');\n</code></pre>\n<!--kg-card-end: markdown--><p>From then on, the SVG can be mostly be handled like any other element. You can add styles, classes, and also - most importantly - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\">attributes</a>.</p><p>So let's add the following function to the <code>main.js</code> file. It will take in the anchor tag into which we will inject the created graphic, making it suitable for our scrolling feature.</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">function renderLinkIcon(node) {\n  const iconSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  const iconPath = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'path'\n  );\n\n  iconSvg.setAttribute('fill', 'none');\n  iconSvg.setAttribute('viewBox', '0 0 24 24');\n  iconSvg.setAttribute('stroke', 'black');\n  iconSvg.classList.add('post-icon');\n\n  iconPath.setAttribute(\n    'd',\n    'M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1'\n  );\n  iconPath.setAttribute('stroke-linecap', 'round');\n  iconPath.setAttribute('stroke-linejoin', 'round');\n  iconPath.setAttribute('stroke-width', '2');\n\n  iconSvg.appendChild(iconPath);\n\n  return node.appendChild(iconSvg);\n}\n</code></pre>\n<!--kg-card-end: markdown--><h2 id=\"making-it-all-functional\">Making it all functional</h2><p>Now that we have all the building blocks in place that add the icon, let's put it to action.</p><p>Add the following inside the <code>main.js</code> file, right after placing the text content:</p><!--kg-card-begin: markdown--><pre><code class=\"language-javascript\">// TODO: Add the icon function here\nrenderLinkIcon(postTitleAnchor);\n</code></pre>\n<!--kg-card-end: markdown--><p>And that's it. The icons are prepended to each post and can easily be used as anchor links for smooth scrolling. Below goes the final result: </p><figure class=\"kg-card kg-image-card\"><img src=\"https://blog.q-bit.me/content/images/2021/04/svg-done-screenshot.png\" class=\"kg-image\" alt=\"this image shows the final user interface that includes the svg-icons that serve as anchor tags\" loading=\"lazy\" width=\"1918\" height=\"983\" srcset=\"https://blog.q-bit.me/content/images/size/w600/2021/04/svg-done-screenshot.png 600w, https://blog.q-bit.me/content/images/size/w1000/2021/04/svg-done-screenshot.png 1000w, https://blog.q-bit.me/content/images/size/w1600/2021/04/svg-done-screenshot.png 1600w, https://blog.q-bit.me/content/images/2021/04/svg-done-screenshot.png 1918w\" sizes=\"(min-width: 720px) 720px\"></figure>",
      "comment_id": "6069c404b6454d03943e67dd",
      "feature_image": null,
      "featured": true,
      "created_at": "2021-04-04T15:49:56.000+02:00",
      "updated_at": "2021-08-01T20:18:05.000+02:00",
      "published_at": "2021-04-06T19:49:37.000+02:00",
      "custom_excerpt": "SVGs are easily dropped into existing html content. But what if you wanted to add them dynamically, say to several DOM elements, with Javascript? Read on to find out how.",
      "codeinjection_head": null,
      "codeinjection_foot": null,
      "custom_template": null,
      "canonical_url": null,
      "primary_author": null,
      "primary_tag": null,
      "url": "https://blog.q-bit.me/how-to-create-svg-elements-with-javascript/",
      "excerpt": "SVGs are easily dropped into existing html content. But what if you wanted to add them dynamically, say to several DOM elements, with Javascript? Read on to find out how.",
      "page": false,
      "og_image": null,
      "og_title": null,
      "og_description": null,
      "twitter_image": null,
      "twitter_title": null,
      "twitter_description": null,
      "meta_title": null,
      "meta_description": "SVGs are easily dropped into existing html content. But what if you wanted to add them dynamically, say to several DOM elements, with Javascript?",
      "frontmatter": null
    }
  ],
  "meta": {
    "pagination": { "page": 1, "limit": 15, "pages": 2, "total": 22, "next": 2, "prev": null }
  }
}
